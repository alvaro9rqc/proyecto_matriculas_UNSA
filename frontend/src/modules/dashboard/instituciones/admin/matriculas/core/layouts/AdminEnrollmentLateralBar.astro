---
import type { AuthRequired, User } from '@/modules/auth/core/types/user';
import { capitalize } from '@/modules/core/lib/utils';
import Button from '@/modules/core/ui/button.astro';
import LogoExtended from '@/modules/core/ui/LogoExtended.astro';
import { DASHBOARD_ADMIN_INSTITUTION_ENROLLMENT_ROUTE } from '../lib/routes';
import { LANDING_ROUTE } from '@/modules/landing/core/lib/routes';
import LogoutButton from '@/modules/auth/core/components/LogoutButton.astro';
import { HomeIcon } from '@lucide/astro';
import { getRouteFromPath } from '@/modules/core/lib/routes';
import type { Route } from '@/modules/core/types/route';

// Por ahora solo se requerira un usuario autenticado, ya que el usuario en la base de datos no tiene un rol como campo
// Puede comportarse como un administrador o un usuario normal, dependiendo de la institucion a la que pertenezca
type Props = AuthRequired<User> & {
  // Ruta pasado por prop para no volver a recalcularla
  currentRoute: Route;
};

const { user, currentRoute } = Astro.props;

const dashboardRoute = DASHBOARD_ADMIN_INSTITUTION_ENROLLMENT_ROUTE;
---
<aside class="flex-initial basis-54 px-2 py-6 sticky top-0 h-screen bg-background gap-6 flex flex-col items-center justify-between overflow-y-auto">
  <div class="flex flex-col items-center gap-4 w-full">
    <a href={LANDING_ROUTE.fullPath} class="mb-4">
      <LogoExtended size="lg"/>
    </a>
    <nav class="flex flex-col gap-1 w-full">
      <Button
        as="a"
        variant={dashboardRoute.name === currentRoute.name ? 'default' : 'ghost'}
        size="lg"
        class="w-full justify-start text-left"
        href={dashboardRoute.name === currentRoute.name ? undefined: dashboardRoute.fullPath}
      >
        <HomeIcon />
        <span>Panel</span>
      </Button>
      {
        dashboardRoute.sub?.map((option) =>
          <Button
            as="a"
            variant={option.name === currentRoute.name ? 'default' : 'ghost'}
            size="lg"
            class="w-full justify-start text-left"
            href={option.name === currentRoute.name ? undefined : option.fullPath}
          >
            {option.icon && <option.icon class="w-5 h-5" />}
            <span>{capitalize(option.path || '')}</span>
          </Button>
        )
      }
    </nav>
  </div>
  <div class="min-h-12 flex flex-col gap-4 w-full">
    <div class="flex flex-col items-center gap-2">
      <Button class="size-15 rounded-full" variant="outline" size="icon">
          <span class="sr-only">Personal photo</span>
          <img
            class="size-full object-cover rounded-full"
            src={user.avatar_url}
            alt="User profile"
          />
      </Button>
      <div class="flex flex-col items-center">
        <span class="font-medium">{user.name}</span>
        <span class="text-sm text-muted-foreground">{user.email}</span>
      </div>
    </div>
    <LogoutButton class="w-full" />
  </div>
</aside>
