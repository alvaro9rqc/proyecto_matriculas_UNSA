// Code generated by goa v3.21.1, DO NOT EDIT.
//
// course endpoints
//
// Command:
// $ goa gen github.com/enrollment/design/api

package course

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "course" service endpoints.
type Endpoints struct {
	UploadAllCourses        goa.Endpoint
	GetAllCourses           goa.Endpoint
	GetUserAvailableCourses goa.Endpoint
}

// NewEndpoints wraps the methods of the "course" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		UploadAllCourses:        NewUploadAllCoursesEndpoint(s),
		GetAllCourses:           NewGetAllCoursesEndpoint(s),
		GetUserAvailableCourses: NewGetUserAvailableCoursesEndpoint(s),
	}
}

// Use applies the given middleware to all the "course" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.UploadAllCourses = m(e.UploadAllCourses)
	e.GetAllCourses = m(e.GetAllCourses)
	e.GetUserAvailableCourses = m(e.GetUserAvailableCourses)
}

// NewUploadAllCoursesEndpoint returns an endpoint function that calls the
// method "upload_all_courses" of service "course".
func NewUploadAllCoursesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UploadAllCoursesPayload)
		return nil, s.UploadAllCourses(ctx, p)
	}
}

// NewGetAllCoursesEndpoint returns an endpoint function that calls the method
// "get_all_courses" of service "course".
func NewGetAllCoursesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetAllCoursesPayload)
		return s.GetAllCourses(ctx, p)
	}
}

// NewGetUserAvailableCoursesEndpoint returns an endpoint function that calls
// the method "get_user_available_courses" of service "course".
func NewGetUserAvailableCoursesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.GetUserAvailableCourses(ctx)
	}
}
