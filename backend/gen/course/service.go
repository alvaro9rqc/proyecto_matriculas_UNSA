// Code generated by goa v3.21.0, DO NOT EDIT.
//
// course service
//
// Command:
// $ goa gen github.com/enrollment/design/api

package course

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Manage the courses to enrollements
type Service interface {
	// Upload all courses from data of file, only admin can use this method
	UploadAllCourses(context.Context, *UploadAllCoursesPayload) (err error)
	// Get all courses, only admin can use this method
	GetAllCourses(context.Context, *GetAllCoursesPayload) (res []*Course, err error)
	// Get all courses available for the user, only user can use this method
	GetUserAvailableCourses(context.Context) (res []*Course, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "course"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "course"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"upload_all_courses", "get_all_courses", "get_user_available_courses"}

// Course represents a course in the system
type Course struct {
	// Unique identifier for the course
	ID string
	// Name of the course
	Name string
	// Number of credits for the course
	Credits int
	// Cicle number of the course
	CicleNumber int
}

// Payload for uploading a single course
type CoursePayload struct {
	// Name of the course
	Name string
	// Number of credits for the course
	Credits int
	// Cicle number of the course
	CicleNumber int
}

// GetAllCoursesPayload is the payload type of the course service
// get_all_courses method.
type GetAllCoursesPayload struct {
	// Page number for pagination
	Page int
	// Number of items per page
	Limit int
}

// UploadAllCoursesPayload is the payload type of the course service
// upload_all_courses method.
type UploadAllCoursesPayload struct {
	Courses []*CoursePayload
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeUnAuthorized builds a goa.ServiceError from an error.
func MakeUnAuthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "un_authorized", false, false, false)
}
