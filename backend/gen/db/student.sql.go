// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: student.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteStudentCourse = `-- name: DeleteStudentCourse :exec
DELETE FROM student_course
WHERE student_id = $1 AND course_id = $2
`

type DeleteStudentCourseParams struct {
	StudentID int32
	CourseID  int32
}

func (q *Queries) DeleteStudentCourse(ctx context.Context, arg DeleteStudentCourseParams) error {
	_, err := q.db.Exec(ctx, deleteStudentCourse, arg.StudentID, arg.CourseID)
	return err
}

const enrollmentStudentCourse = `-- name: EnrollmentStudentCourse :exec
INSERT INTO
    student_course (student_id, course_id, attemps, passed)
VALUES
    ($1, $2, 1, $3)
`

type EnrollmentStudentCourseParams struct {
	StudentID int32
	CourseID  int32
	Passed    bool
}

func (q *Queries) EnrollmentStudentCourse(ctx context.Context, arg EnrollmentStudentCourseParams) error {
	_, err := q.db.Exec(ctx, enrollmentStudentCourse, arg.StudentID, arg.CourseID, arg.Passed)
	return err
}

const getEnrolledUsersByCourse = `-- name: GetEnrolledUsersByCourse :many
SELECT
    au.first_name,
    au.remaining_names,
    au.last_names,
    au.email
FROM student_course sc
JOIN student s ON sc.student_id = s.id
JOIN account_user au ON s.account_user_id = au.id
WHERE sc.course_id = $1
`

type GetEnrolledUsersByCourseRow struct {
	FirstName      string
	RemainingNames pgtype.Text
	LastNames      string
	Email          string
}

func (q *Queries) GetEnrolledUsersByCourse(ctx context.Context, courseID int32) ([]GetEnrolledUsersByCourseRow, error) {
	rows, err := q.db.Query(ctx, getEnrolledUsersByCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEnrolledUsersByCourseRow
	for rows.Next() {
		var i GetEnrolledUsersByCourseRow
		if err := rows.Scan(
			&i.FirstName,
			&i.RemainingNames,
			&i.LastNames,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnrollmentStudentCourse = `-- name: UpdateEnrollmentStudentCourse :exec
UPDATE student_course
SET
    attemps = attemps + 1,
    passed = $3
WHERE
    student_id = $1 AND course_id = $2
`

type UpdateEnrollmentStudentCourseParams struct {
	StudentID int32
	CourseID  int32
	Passed    bool
}

func (q *Queries) UpdateEnrollmentStudentCourse(ctx context.Context, arg UpdateEnrollmentStudentCourseParams) error {
	_, err := q.db.Exec(ctx, updateEnrollmentStudentCourse, arg.StudentID, arg.CourseID, arg.Passed)
	return err
}
