// Code generated by goa v3.21.1, DO NOT EDIT.
//
// queue service
//
// Command:
// $ goa gen github.com/enrollment/design/api

package queue

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Manage the queue of courses and enrollments
type Service interface {
	// Enqueue a student to the queue
	Enqueue(context.Context) (err error)
	// Suscribe a student to queue in real time
	EnqueueSuscribe(context.Context, EnqueueSuscribeServerStream) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "course"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "queue"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"enqueue", "enqueue_suscribe"}

// EnqueueSuscribeServerStream is the interface a "enqueue_suscribe" endpoint
// server stream must satisfy.
type EnqueueSuscribeServerStream interface {
	// Send streams instances of "EnqueueSuscribeResult".
	Send(*EnqueueSuscribeResult) error
	// SendWithContext streams instances of "EnqueueSuscribeResult" with context.
	SendWithContext(context.Context, *EnqueueSuscribeResult) error
	// Close closes the stream.
	Close() error
}

// EnqueueSuscribeClientStream is the interface a "enqueue_suscribe" endpoint
// client stream must satisfy.
type EnqueueSuscribeClientStream interface {
	// Recv reads instances of "EnqueueSuscribeResult" from the stream.
	Recv() (*EnqueueSuscribeResult, error)
	// RecvWithContext reads instances of "EnqueueSuscribeResult" from the stream
	// with context.
	RecvWithContext(context.Context) (*EnqueueSuscribeResult, error)
}

// EnqueueSuscribeResult is the result type of the queue service
// enqueue_suscribe method.
type EnqueueSuscribeResult struct {
	// Position in the queue
	Position *int32
	// Status of the queue
	Status *string
	// Total number of students in the queue
	Total *int32
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "bad_request", false, false, false)
}

// MakeUnAuthorized builds a goa.ServiceError from an error.
func MakeUnAuthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "un_authorized", false, false, false)
}
