// Code generated by goa v3.21.1, DO NOT EDIT.
//
// queue endpoints
//
// Command:
// $ goa gen github.com/enrollment/design/api

package queue

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "queue" service endpoints.
type Endpoints struct {
	Enqueue         goa.Endpoint
	EnqueueSuscribe goa.Endpoint
}

// EnqueueSuscribeEndpointInput holds both the payload and the server stream of
// the "enqueue_suscribe" method.
type EnqueueSuscribeEndpointInput struct {
	// Stream is the server stream used by the "enqueue_suscribe" method to send
	// data.
	Stream EnqueueSuscribeServerStream
}

// NewEndpoints wraps the methods of the "queue" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Enqueue:         NewEnqueueEndpoint(s),
		EnqueueSuscribe: NewEnqueueSuscribeEndpoint(s),
	}
}

// Use applies the given middleware to all the "queue" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Enqueue = m(e.Enqueue)
	e.EnqueueSuscribe = m(e.EnqueueSuscribe)
}

// NewEnqueueEndpoint returns an endpoint function that calls the method
// "enqueue" of service "queue".
func NewEnqueueEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return nil, s.Enqueue(ctx)
	}
}

// NewEnqueueSuscribeEndpoint returns an endpoint function that calls the
// method "enqueue_suscribe" of service "queue".
func NewEnqueueSuscribeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		ep := req.(*EnqueueSuscribeEndpointInput)
		return nil, s.EnqueueSuscribe(ctx, ep.Stream)
	}
}
