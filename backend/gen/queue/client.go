// Code generated by goa v3.21.1, DO NOT EDIT.
//
// queue client
//
// Command:
// $ goa gen github.com/enrollment/design/api

package queue

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "queue" service client.
type Client struct {
	EnqueueEndpoint         goa.Endpoint
	EnqueueSuscribeEndpoint goa.Endpoint
}

// NewClient initializes a "queue" service client given the endpoints.
func NewClient(enqueue, enqueueSuscribe goa.Endpoint) *Client {
	return &Client{
		EnqueueEndpoint:         enqueue,
		EnqueueSuscribeEndpoint: enqueueSuscribe,
	}
}

// Enqueue calls the "enqueue" endpoint of the "queue" service.
// Enqueue may return the following errors:
//   - "not_found" (type *goa.ServiceError): The resource was not found
//   - "bad_request" (type *goa.ServiceError): Invalid request
//   - "un_authorized" (type *goa.ServiceError): Unauthorized access
//   - error: internal error
func (c *Client) Enqueue(ctx context.Context) (err error) {
	_, err = c.EnqueueEndpoint(ctx, nil)
	return
}

// EnqueueSuscribe calls the "enqueue_suscribe" endpoint of the "queue" service.
// EnqueueSuscribe may return the following errors:
//   - "not_found" (type *goa.ServiceError): The resource was not found
//   - "bad_request" (type *goa.ServiceError): Invalid request
//   - "un_authorized" (type *goa.ServiceError): Unauthorized access
//   - error: internal error
func (c *Client) EnqueueSuscribe(ctx context.Context) (res EnqueueSuscribeClientStream, err error) {
	var ires any
	ires, err = c.EnqueueSuscribeEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(EnqueueSuscribeClientStream), nil
}
