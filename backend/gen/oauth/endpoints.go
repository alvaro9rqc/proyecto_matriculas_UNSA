// Code generated by goa v3.21.1, DO NOT EDIT.
//
// oauth endpoints
//
// Command:
// $ goa gen github.com/enrollment/design/api

package oauth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "oauth" service endpoints.
type Endpoints struct {
	Login    goa.Endpoint
	Callback goa.Endpoint
	Logout   goa.Endpoint
	Me       goa.Endpoint
}

// NewEndpoints wraps the methods of the "oauth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Login:    NewLoginEndpoint(s),
		Callback: NewCallbackEndpoint(s),
		Logout:   NewLogoutEndpoint(s),
		Me:       NewMeEndpoint(s),
	}
}

// Use applies the given middleware to all the "oauth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
	e.Callback = m(e.Callback)
	e.Logout = m(e.Logout)
	e.Me = m(e.Me)
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "oauth".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}

// NewCallbackEndpoint returns an endpoint function that calls the method
// "callback" of service "oauth".
func NewCallbackEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CallbackPayload)
		return s.Callback(ctx, p)
	}
}

// NewLogoutEndpoint returns an endpoint function that calls the method
// "logout" of service "oauth".
func NewLogoutEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LogoutPayload)
		return nil, s.Logout(ctx, p)
	}
}

// NewMeEndpoint returns an endpoint function that calls the method "me" of
// service "oauth".
func NewMeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Me(ctx)
	}
}
