// Code generated by goa v3.21.1, DO NOT EDIT.
//
// oauth endpoints
//
// Command:
// $ goa gen github.com/enrollment/design/api

package oauth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "oauth" service endpoints.
type Endpoints struct {
	Redirect goa.Endpoint
	Callback goa.Endpoint
	Logout   goa.Endpoint
}

// NewEndpoints wraps the methods of the "oauth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Redirect: NewRedirectEndpoint(s),
		Callback: NewCallbackEndpoint(s),
		Logout:   NewLogoutEndpoint(s),
	}
}

// Use applies the given middleware to all the "oauth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Redirect = m(e.Redirect)
	e.Callback = m(e.Callback)
	e.Logout = m(e.Logout)
}

// NewRedirectEndpoint returns an endpoint function that calls the method
// "redirect" of service "oauth".
func NewRedirectEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RedirectPayload)
		return s.Redirect(ctx, p)
	}
}

// NewCallbackEndpoint returns an endpoint function that calls the method
// "callback" of service "oauth".
func NewCallbackEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CallbackPayload)
		return s.Callback(ctx, p)
	}
}

// NewLogoutEndpoint returns an endpoint function that calls the method
// "logout" of service "oauth".
func NewLogoutEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LogoutPayload)
		return nil, s.Logout(ctx, p)
	}
}
