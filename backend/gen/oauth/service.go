// Code generated by goa v3.21.1, DO NOT EDIT.
//
// oauth service
//
// Command:
// $ goa gen github.com/enrollment/design/api

package oauth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// OAuth-based authentication service for Google and Microsoft
type Service interface {
	// Generate a redirection URL for the chosen OAuth provider
	Login(context.Context, *LoginPayload) (res *OAuthRedirectResult, err error)
	// Handle OAuth callback and authenticate user
	Callback(context.Context, *CallbackPayload) (res *LoginResult, err error)
	// Terminate the current session and invalidate the token
	Logout(context.Context, *LogoutPayload) (err error)
	// Returns the authenticated user's information
	Me(context.Context) (res *AccountUser, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "course"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "oauth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"login", "callback", "logout", "me"}

// AccountUser is the result type of the oauth service me method.
type AccountUser struct {
	// Unique user ID
	ID string
	// User email
	Email string
	// User first name
	FirstName string
	// User last names
	LastNames string
	// User remaining names
	RemainingNames string
}

// CallbackPayload is the payload type of the oauth service callback method.
type CallbackPayload struct {
	// OAuth provider name
	Provider OAuthProvider
	// Authorization code
	Code string
	// Anti-CSRF state token
	State string
	// Client IP address
	IPAddress string
	// User-Agent header value
	UserAgent string
}

// LoginPayload is the payload type of the oauth service login method.
type LoginPayload struct {
	// OAuth provider name
	Provider OAuthProvider
}

// LoginResult is the result type of the oauth service callback method.
type LoginResult struct {
	// Session access token
	AccessToken string
	// Access token expiration timestamp
	ExpiresAt string
	// Cookie for session management
	SessionToken *string
}

// LogoutPayload is the payload type of the oauth service logout method.
type LogoutPayload struct {
	// Session token to invalidate
	Token string
}

// OAuth provider options
type OAuthProvider string

// OAuthRedirectResult is the result type of the oauth service login method.
type OAuthRedirectResult struct {
	// OAuth authorization URL
	Location string
}

// MakeInvalidProvider builds a goa.ServiceError from an error.
func MakeInvalidProvider(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_provider", false, false, false)
}

// MakeInvalidToken builds a goa.ServiceError from an error.
func MakeInvalidToken(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_token", false, false, false)
}

// MakeServerError builds a goa.ServiceError from an error.
func MakeServerError(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "server_error", false, false, false)
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}
