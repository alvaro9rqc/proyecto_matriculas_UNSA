// Code generated by goa v3.21.0, DO NOT EDIT.
//
// oauth service
//
// Command:
// $ goa gen github.com/enrollment/design/api

package oauth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Oauth Authentication service
type Service interface {
	// List all available oauth providers
	ListProviders(context.Context) (res []*OAuthProvider, err error)
	// Login using OAuth with a specific provider
	Login(context.Context, *LoginPayload) (res *UserOauthInfo, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "course"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "oauth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"list_providers", "login"}

// LoginPayload is the payload type of the oauth service login method.
type LoginPayload struct {
	// ID of the OAuth provider
	OauthProviderID int
	// OAuth code given by the provider
	Code string
}

// registered provider in th system
type OAuthProvider struct {
	// unique identifier
	ID int
	// Intern provider name
	Name string
	// Provider authentication URL
	AuthURL string
}

// UserOauthInfo is the result type of the oauth service login method.
type UserOauthInfo struct {
	// ID of the provider used
	OauthProviderID *int
	// Access token given by the provider
	ProviderUserID *string
	// Profile picture URL
	ProfilePicture *string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}
