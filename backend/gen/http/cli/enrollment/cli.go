// Code generated by goa v3.21.0, DO NOT EDIT.
//
// enrollment HTTP client CLI support package
//
// Command:
// $ goa gen github.com/enrollment/design/api

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	authc "github.com/enrollment/gen/http/auth/client"
	enrollmentc "github.com/enrollment/gen/http/enrollment/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `enrollment (enroll|update-enrollment|delete-enrollment|list-enrolled-users)
auth (me|google-login|google-logout|google-callback)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` enrollment enroll --body '{
      "attendee_id": 973980986,
      "course_id": 429573902,
      "passed": true
   }'` + "\n" +
		os.Args[0] + ` auth me` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		enrollmentFlags = flag.NewFlagSet("enrollment", flag.ContinueOnError)

		enrollmentEnrollFlags    = flag.NewFlagSet("enroll", flag.ExitOnError)
		enrollmentEnrollBodyFlag = enrollmentEnrollFlags.String("body", "REQUIRED", "")

		enrollmentUpdateEnrollmentFlags    = flag.NewFlagSet("update-enrollment", flag.ExitOnError)
		enrollmentUpdateEnrollmentBodyFlag = enrollmentUpdateEnrollmentFlags.String("body", "REQUIRED", "")

		enrollmentDeleteEnrollmentFlags          = flag.NewFlagSet("delete-enrollment", flag.ExitOnError)
		enrollmentDeleteEnrollmentAttendeeIDFlag = enrollmentDeleteEnrollmentFlags.String("attendee-id", "REQUIRED", "ID del asistente")
		enrollmentDeleteEnrollmentCourseIDFlag   = enrollmentDeleteEnrollmentFlags.String("course-id", "REQUIRED", "ID del curso")

		enrollmentListEnrolledUsersFlags        = flag.NewFlagSet("list-enrolled-users", flag.ExitOnError)
		enrollmentListEnrolledUsersCourseIDFlag = enrollmentListEnrolledUsersFlags.String("course-id", "REQUIRED", "ID del curso")

		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authMeFlags = flag.NewFlagSet("me", flag.ExitOnError)

		authGoogleLoginFlags = flag.NewFlagSet("google-login", flag.ExitOnError)

		authGoogleLogoutFlags = flag.NewFlagSet("google-logout", flag.ExitOnError)

		authGoogleCallbackFlags = flag.NewFlagSet("google-callback", flag.ExitOnError)
	)
	enrollmentFlags.Usage = enrollmentUsage
	enrollmentEnrollFlags.Usage = enrollmentEnrollUsage
	enrollmentUpdateEnrollmentFlags.Usage = enrollmentUpdateEnrollmentUsage
	enrollmentDeleteEnrollmentFlags.Usage = enrollmentDeleteEnrollmentUsage
	enrollmentListEnrolledUsersFlags.Usage = enrollmentListEnrolledUsersUsage

	authFlags.Usage = authUsage
	authMeFlags.Usage = authMeUsage
	authGoogleLoginFlags.Usage = authGoogleLoginUsage
	authGoogleLogoutFlags.Usage = authGoogleLogoutUsage
	authGoogleCallbackFlags.Usage = authGoogleCallbackUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "enrollment":
			svcf = enrollmentFlags
		case "auth":
			svcf = authFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "enrollment":
			switch epn {
			case "enroll":
				epf = enrollmentEnrollFlags

			case "update-enrollment":
				epf = enrollmentUpdateEnrollmentFlags

			case "delete-enrollment":
				epf = enrollmentDeleteEnrollmentFlags

			case "list-enrolled-users":
				epf = enrollmentListEnrolledUsersFlags

			}

		case "auth":
			switch epn {
			case "me":
				epf = authMeFlags

			case "google-login":
				epf = authGoogleLoginFlags

			case "google-logout":
				epf = authGoogleLogoutFlags

			case "google-callback":
				epf = authGoogleCallbackFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "enrollment":
			c := enrollmentc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "enroll":
				endpoint = c.Enroll()
				data, err = enrollmentc.BuildEnrollPayload(*enrollmentEnrollBodyFlag)
			case "update-enrollment":
				endpoint = c.UpdateEnrollment()
				data, err = enrollmentc.BuildUpdateEnrollmentPayload(*enrollmentUpdateEnrollmentBodyFlag)
			case "delete-enrollment":
				endpoint = c.DeleteEnrollment()
				data, err = enrollmentc.BuildDeleteEnrollmentPayload(*enrollmentDeleteEnrollmentAttendeeIDFlag, *enrollmentDeleteEnrollmentCourseIDFlag)
			case "list-enrolled-users":
				endpoint = c.ListEnrolledUsers()
				data, err = enrollmentc.BuildListEnrolledUsersPayload(*enrollmentListEnrolledUsersCourseIDFlag)
			}
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "me":
				endpoint = c.Me()
			case "google-login":
				endpoint = c.GoogleLogin()
			case "google-logout":
				endpoint = c.GoogleLogout()
			case "google-callback":
				endpoint = c.GoogleCallback()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// enrollmentUsage displays the usage of the enrollment command and its
// subcommands.
func enrollmentUsage() {
	fmt.Fprintf(os.Stderr, `Gestión de inscripción de asistentes en cursos
Usage:
    %[1]s [globalflags] enrollment COMMAND [flags]

COMMAND:
    enroll: Inscribir un asistente en un curso
    update-enrollment: Actualizar el estado de una inscripción
    delete-enrollment: Eliminar una inscripción de un asistente en un curso
    list-enrolled-users: Listar usuarios inscritos en un curso

Additional help:
    %[1]s enrollment COMMAND --help
`, os.Args[0])
}
func enrollmentEnrollUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] enrollment enroll -body JSON

Inscribir un asistente en un curso
    -body JSON: 

Example:
    %[1]s enrollment enroll --body '{
      "attendee_id": 973980986,
      "course_id": 429573902,
      "passed": true
   }'
`, os.Args[0])
}

func enrollmentUpdateEnrollmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] enrollment update-enrollment -body JSON

Actualizar el estado de una inscripción
    -body JSON: 

Example:
    %[1]s enrollment update-enrollment --body '{
      "attendee_id": 108527587,
      "course_id": 999067554,
      "passed": false
   }'
`, os.Args[0])
}

func enrollmentDeleteEnrollmentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] enrollment delete-enrollment -attendee-id INT32 -course-id INT32

Eliminar una inscripción de un asistente en un curso
    -attendee-id INT32: ID del asistente
    -course-id INT32: ID del curso

Example:
    %[1]s enrollment delete-enrollment --attendee-id 1777321756 --course-id 339152236
`, os.Args[0])
}

func enrollmentListEnrolledUsersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] enrollment list-enrolled-users -course-id INT32

Listar usuarios inscritos en un curso
    -course-id INT32: ID del curso

Example:
    %[1]s enrollment list-enrolled-users --course-id 1039825145
`, os.Args[0])
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `Service to handle authentication and authorization
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    me: Returns information about the currently authenticated user.
    google-login: Initiates the Google OAuth 2.0 login flow by redirecting to the Google authorization endpoint.
    google-logout: Logs the user out by clearing the session and redirecting to the appropriate post-logout URL.
    google-callback: Google OAuth callback. Creates or reuses a session and redirects to the frontend.

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authMeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth me

Returns information about the currently authenticated user.

Example:
    %[1]s auth me
`, os.Args[0])
}

func authGoogleLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth google-login

Initiates the Google OAuth 2.0 login flow by redirecting to the Google authorization endpoint.

Example:
    %[1]s auth google-login
`, os.Args[0])
}

func authGoogleLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth google-logout

Logs the user out by clearing the session and redirecting to the appropriate post-logout URL.

Example:
    %[1]s auth google-logout
`, os.Args[0])
}

func authGoogleCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth google-callback

Google OAuth callback. Creates or reuses a session and redirects to the frontend.

Example:
    %[1]s auth google-callback
`, os.Args[0])
}
