// Code generated by goa v3.21.1, DO NOT EDIT.
//
// course HTTP client CLI support package
//
// Command:
// $ goa gen github.com/enrollment/design/api

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	coursec "github.com/enrollment/gen/http/course/client"
	enrollmentc "github.com/enrollment/gen/http/enrollment/client"
	oauthc "github.com/enrollment/gen/http/oauth/client"
	queuec "github.com/enrollment/gen/http/queue/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `course (upload-all-courses|get-all-courses|get-user-available-courses)
enrollment (enroll|get-enrollment-courses)
queue (enqueue|enqueue-suscribe)
oauth (redirect|callback|logout|me)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` course upload-all-courses --body '{
      "courses": [
         {
            "cicle_number": 1,
            "credits": 3,
            "name": "Introduction to Programming"
         },
         {
            "cicle_number": 1,
            "credits": 3,
            "name": "Introduction to Programming"
         }
      ]
   }'` + "\n" +
		os.Args[0] + ` enrollment enroll --body '{
      "enrollCourses": [
         {
            "course_id": 1368988241,
            "id": 1845633047,
            "program_id": 694091412
         },
         {
            "course_id": 1368988241,
            "id": 1845633047,
            "program_id": 694091412
         },
         {
            "course_id": 1368988241,
            "id": 1845633047,
            "program_id": 694091412
         },
         {
            "course_id": 1368988241,
            "id": 1845633047,
            "program_id": 694091412
         }
      ]
   }'` + "\n" +
		os.Args[0] + ` queue enqueue` + "\n" +
		os.Args[0] + ` oauth redirect --provider "google"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
	dialer goahttp.Dialer,
	queueConfigurer *queuec.ConnConfigurer,
) (goa.Endpoint, any, error) {
	var (
		courseFlags = flag.NewFlagSet("course", flag.ContinueOnError)

		courseUploadAllCoursesFlags    = flag.NewFlagSet("upload-all-courses", flag.ExitOnError)
		courseUploadAllCoursesBodyFlag = courseUploadAllCoursesFlags.String("body", "REQUIRED", "")

		courseGetAllCoursesFlags    = flag.NewFlagSet("get-all-courses", flag.ExitOnError)
		courseGetAllCoursesBodyFlag = courseGetAllCoursesFlags.String("body", "REQUIRED", "")

		courseGetUserAvailableCoursesFlags = flag.NewFlagSet("get-user-available-courses", flag.ExitOnError)

		enrollmentFlags = flag.NewFlagSet("enrollment", flag.ContinueOnError)

		enrollmentEnrollFlags    = flag.NewFlagSet("enroll", flag.ExitOnError)
		enrollmentEnrollBodyFlag = enrollmentEnrollFlags.String("body", "REQUIRED", "")

		enrollmentGetEnrollmentCoursesFlags = flag.NewFlagSet("get-enrollment-courses", flag.ExitOnError)

		queueFlags = flag.NewFlagSet("queue", flag.ContinueOnError)

		queueEnqueueFlags = flag.NewFlagSet("enqueue", flag.ExitOnError)

		queueEnqueueSuscribeFlags = flag.NewFlagSet("enqueue-suscribe", flag.ExitOnError)

		oauthFlags = flag.NewFlagSet("oauth", flag.ContinueOnError)

		oauthRedirectFlags        = flag.NewFlagSet("redirect", flag.ExitOnError)
		oauthRedirectProviderFlag = oauthRedirectFlags.String("provider", "REQUIRED", "OAuth provider name")

		oauthCallbackFlags         = flag.NewFlagSet("callback", flag.ExitOnError)
		oauthCallbackProviderFlag  = oauthCallbackFlags.String("provider", "REQUIRED", "OAuth provider name")
		oauthCallbackCodeFlag      = oauthCallbackFlags.String("code", "REQUIRED", "")
		oauthCallbackStateFlag     = oauthCallbackFlags.String("state", "REQUIRED", "")
		oauthCallbackIPAddressFlag = oauthCallbackFlags.String("ip-address", "REQUIRED", "")
		oauthCallbackUserAgentFlag = oauthCallbackFlags.String("user-agent", "REQUIRED", "")

		oauthLogoutFlags     = flag.NewFlagSet("logout", flag.ExitOnError)
		oauthLogoutTokenFlag = oauthLogoutFlags.String("token", "REQUIRED", "")

		oauthMeFlags = flag.NewFlagSet("me", flag.ExitOnError)
	)
	courseFlags.Usage = courseUsage
	courseUploadAllCoursesFlags.Usage = courseUploadAllCoursesUsage
	courseGetAllCoursesFlags.Usage = courseGetAllCoursesUsage
	courseGetUserAvailableCoursesFlags.Usage = courseGetUserAvailableCoursesUsage

	enrollmentFlags.Usage = enrollmentUsage
	enrollmentEnrollFlags.Usage = enrollmentEnrollUsage
	enrollmentGetEnrollmentCoursesFlags.Usage = enrollmentGetEnrollmentCoursesUsage

	queueFlags.Usage = queueUsage
	queueEnqueueFlags.Usage = queueEnqueueUsage
	queueEnqueueSuscribeFlags.Usage = queueEnqueueSuscribeUsage

	oauthFlags.Usage = oauthUsage
	oauthRedirectFlags.Usage = oauthRedirectUsage
	oauthCallbackFlags.Usage = oauthCallbackUsage
	oauthLogoutFlags.Usage = oauthLogoutUsage
	oauthMeFlags.Usage = oauthMeUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "course":
			svcf = courseFlags
		case "enrollment":
			svcf = enrollmentFlags
		case "queue":
			svcf = queueFlags
		case "oauth":
			svcf = oauthFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "course":
			switch epn {
			case "upload-all-courses":
				epf = courseUploadAllCoursesFlags

			case "get-all-courses":
				epf = courseGetAllCoursesFlags

			case "get-user-available-courses":
				epf = courseGetUserAvailableCoursesFlags

			}

		case "enrollment":
			switch epn {
			case "enroll":
				epf = enrollmentEnrollFlags

			case "get-enrollment-courses":
				epf = enrollmentGetEnrollmentCoursesFlags

			}

		case "queue":
			switch epn {
			case "enqueue":
				epf = queueEnqueueFlags

			case "enqueue-suscribe":
				epf = queueEnqueueSuscribeFlags

			}

		case "oauth":
			switch epn {
			case "redirect":
				epf = oauthRedirectFlags

			case "callback":
				epf = oauthCallbackFlags

			case "logout":
				epf = oauthLogoutFlags

			case "me":
				epf = oauthMeFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "course":
			c := coursec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upload-all-courses":
				endpoint = c.UploadAllCourses()
				data, err = coursec.BuildUploadAllCoursesPayload(*courseUploadAllCoursesBodyFlag)
			case "get-all-courses":
				endpoint = c.GetAllCourses()
				data, err = coursec.BuildGetAllCoursesPayload(*courseGetAllCoursesBodyFlag)
			case "get-user-available-courses":
				endpoint = c.GetUserAvailableCourses()
			}
		case "enrollment":
			c := enrollmentc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "enroll":
				endpoint = c.Enroll()
				data, err = enrollmentc.BuildEnrollPayload(*enrollmentEnrollBodyFlag)
			case "get-enrollment-courses":
				endpoint = c.GetEnrollmentCourses()
			}
		case "queue":
			c := queuec.NewClient(scheme, host, doer, enc, dec, restore, dialer, queueConfigurer)
			switch epn {
			case "enqueue":
				endpoint = c.Enqueue()
			case "enqueue-suscribe":
				endpoint = c.EnqueueSuscribe()
			}
		case "oauth":
			c := oauthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "redirect":
				endpoint = c.Redirect()
				data, err = oauthc.BuildRedirectPayload(*oauthRedirectProviderFlag)
			case "callback":
				endpoint = c.Callback()
				data, err = oauthc.BuildCallbackPayload(*oauthCallbackProviderFlag, *oauthCallbackCodeFlag, *oauthCallbackStateFlag, *oauthCallbackIPAddressFlag, *oauthCallbackUserAgentFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = oauthc.BuildLogoutPayload(*oauthLogoutTokenFlag)
			case "me":
				endpoint = c.Me()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// courseUsage displays the usage of the course command and its subcommands.
func courseUsage() {
	fmt.Fprintf(os.Stderr, `Manage the courses to enrollements
Usage:
    %[1]s [globalflags] course COMMAND [flags]

COMMAND:
    upload-all-courses: Upload all courses from data of file, only admin can use this method
    get-all-courses: Get all courses, only admin can use this method
    get-user-available-courses: Get all courses available for the user, only user can use this method

Additional help:
    %[1]s course COMMAND --help
`, os.Args[0])
}
func courseUploadAllCoursesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] course upload-all-courses -body JSON

Upload all courses from data of file, only admin can use this method
    -body JSON: 

Example:
    %[1]s course upload-all-courses --body '{
      "courses": [
         {
            "cicle_number": 1,
            "credits": 3,
            "name": "Introduction to Programming"
         },
         {
            "cicle_number": 1,
            "credits": 3,
            "name": "Introduction to Programming"
         }
      ]
   }'
`, os.Args[0])
}

func courseGetAllCoursesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] course get-all-courses -body JSON

Get all courses, only admin can use this method
    -body JSON: 

Example:
    %[1]s course get-all-courses --body '{
      "limit": 8911149612749746103,
      "page": 916775543018707264
   }'
`, os.Args[0])
}

func courseGetUserAvailableCoursesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] course get-user-available-courses

Get all courses available for the user, only user can use this method

Example:
    %[1]s course get-user-available-courses
`, os.Args[0])
}

// enrollmentUsage displays the usage of the enrollment command and its
// subcommands.
func enrollmentUsage() {
	fmt.Fprintf(os.Stderr, `Manages attendee enrollment in courses
Usage:
    %[1]s [globalflags] enrollment COMMAND [flags]

COMMAND:
    enroll: Enroll an student in selected courses
    get-enrollment-courses: Get all courses enrolled by an attendee

Additional help:
    %[1]s enrollment COMMAND --help
`, os.Args[0])
}
func enrollmentEnrollUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] enrollment enroll -body JSON

Enroll an student in selected courses
    -body JSON: 

Example:
    %[1]s enrollment enroll --body '{
      "enrollCourses": [
         {
            "course_id": 1368988241,
            "id": 1845633047,
            "program_id": 694091412
         },
         {
            "course_id": 1368988241,
            "id": 1845633047,
            "program_id": 694091412
         },
         {
            "course_id": 1368988241,
            "id": 1845633047,
            "program_id": 694091412
         },
         {
            "course_id": 1368988241,
            "id": 1845633047,
            "program_id": 694091412
         }
      ]
   }'
`, os.Args[0])
}

func enrollmentGetEnrollmentCoursesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] enrollment get-enrollment-courses

Get all courses enrolled by an attendee

Example:
    %[1]s enrollment get-enrollment-courses
`, os.Args[0])
}

// queueUsage displays the usage of the queue command and its subcommands.
func queueUsage() {
	fmt.Fprintf(os.Stderr, `Manage the queue of courses and enrollments
Usage:
    %[1]s [globalflags] queue COMMAND [flags]

COMMAND:
    enqueue: Enqueue a student to the queue
    enqueue-suscribe: Suscribe a student to queue in real time

Additional help:
    %[1]s queue COMMAND --help
`, os.Args[0])
}
func queueEnqueueUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] queue enqueue

Enqueue a student to the queue

Example:
    %[1]s queue enqueue
`, os.Args[0])
}

func queueEnqueueSuscribeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] queue enqueue-suscribe

Suscribe a student to queue in real time

Example:
    %[1]s queue enqueue-suscribe
`, os.Args[0])
}

// oauthUsage displays the usage of the oauth command and its subcommands.
func oauthUsage() {
	fmt.Fprintf(os.Stderr, `OAuth-based authentication service for Google and Microsoft
Usage:
    %[1]s [globalflags] oauth COMMAND [flags]

COMMAND:
    redirect: Generate a redirection URL for the chosen OAuth provider
    callback: Handle OAuth callback and authenticate user
    logout: Terminate the current session and invalidate the token
    me: Returns the authenticated user's information

Additional help:
    %[1]s oauth COMMAND --help
`, os.Args[0])
}
func oauthRedirectUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth redirect -provider STRING

Generate a redirection URL for the chosen OAuth provider
    -provider STRING: OAuth provider name

Example:
    %[1]s oauth redirect --provider "google"
`, os.Args[0])
}

func oauthCallbackUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth callback -provider STRING -code STRING -state STRING -ip-address STRING -user-agent STRING

Handle OAuth callback and authenticate user
    -provider STRING: OAuth provider name
    -code STRING: 
    -state STRING: 
    -ip-address STRING: 
    -user-agent STRING: 

Example:
    %[1]s oauth callback --provider "google" --code "1jj" --state "cve" --ip-address "247.242.207.245" --user-agent "Praesentium omnis consectetur ipsum pariatur fuga placeat."
`, os.Args[0])
}

func oauthLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth logout -token STRING

Terminate the current session and invalidate the token
    -token STRING: 

Example:
    %[1]s oauth logout --token "Iusto iusto minima magni similique accusantium odio."
`, os.Args[0])
}

func oauthMeUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] oauth me

Returns the authenticated user's information

Example:
    %[1]s oauth me
`, os.Args[0])
}
