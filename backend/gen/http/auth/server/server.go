// Code generated by goa v3.21.0, DO NOT EDIT.
//
// Auth HTTP server
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	"context"
	"net/http"

	auth "github.com/enrollment/gen/auth"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the Auth service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	Me             http.Handler
	GoogleLogin    http.Handler
	GoogleLogout   http.Handler
	GoogleCallback http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Auth service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *auth.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Me", "GET", "/auth/me"},
			{"GoogleLogin", "GET", "/auth/google/login"},
			{"GoogleLogout", "GET", "/auth/google/logout"},
			{"GoogleCallback", "GET", "/google/callback"},
		},
		Me:             NewMeHandler(e.Me, mux, decoder, encoder, errhandler, formatter),
		GoogleLogin:    NewGoogleLoginHandler(e.GoogleLogin, mux, decoder, encoder, errhandler, formatter),
		GoogleLogout:   NewGoogleLogoutHandler(e.GoogleLogout, mux, decoder, encoder, errhandler, formatter),
		GoogleCallback: NewGoogleCallbackHandler(e.GoogleCallback, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Auth" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Me = m(s.Me)
	s.GoogleLogin = m(s.GoogleLogin)
	s.GoogleLogout = m(s.GoogleLogout)
	s.GoogleCallback = m(s.GoogleCallback)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return auth.MethodNames[:] }

// Mount configures the mux to serve the Auth endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountMeHandler(mux, h.Me)
	MountGoogleLoginHandler(mux, h.GoogleLogin)
	MountGoogleLogoutHandler(mux, h.GoogleLogout)
	MountGoogleCallbackHandler(mux, h.GoogleCallback)
}

// Mount configures the mux to serve the Auth endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountMeHandler configures the mux to serve the "Auth" service "Me" endpoint.
func MountMeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/me", f)
}

// NewMeHandler creates a HTTP handler which loads the HTTP request and calls
// the "Auth" service "Me" endpoint.
func NewMeHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeMeResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Me")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Auth")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGoogleLoginHandler configures the mux to serve the "Auth" service
// "Google login" endpoint.
func MountGoogleLoginHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/google/login", f)
}

// NewGoogleLoginHandler creates a HTTP handler which loads the HTTP request
// and calls the "Auth" service "Google login" endpoint.
func NewGoogleLoginHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGoogleLoginResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Google login")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Auth")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGoogleLogoutHandler configures the mux to serve the "Auth" service
// "Google logout" endpoint.
func MountGoogleLogoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/google/logout", f)
}

// NewGoogleLogoutHandler creates a HTTP handler which loads the HTTP request
// and calls the "Auth" service "Google logout" endpoint.
func NewGoogleLogoutHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGoogleLogoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Google logout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Auth")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGoogleCallbackHandler configures the mux to serve the "Auth" service
// "GoogleCallback" endpoint.
func MountGoogleCallbackHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/google/callback", f)
}

// NewGoogleCallbackHandler creates a HTTP handler which loads the HTTP request
// and calls the "Auth" service "GoogleCallback" endpoint.
func NewGoogleCallbackHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGoogleCallbackResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GoogleCallback")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Auth")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
