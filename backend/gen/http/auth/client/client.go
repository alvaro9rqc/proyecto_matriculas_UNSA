// Code generated by goa v3.21.0, DO NOT EDIT.
//
// Auth client HTTP transport
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the Auth service endpoint HTTP clients.
type Client struct {
	// Me Doer is the HTTP client used to make requests to the Me endpoint.
	MeDoer goahttp.Doer

	// GoogleLogin Doer is the HTTP client used to make requests to the Google
	// login endpoint.
	GoogleLoginDoer goahttp.Doer

	// GoogleLogout Doer is the HTTP client used to make requests to the Google
	// logout endpoint.
	GoogleLogoutDoer goahttp.Doer

	// GoogleCallback Doer is the HTTP client used to make requests to the
	// GoogleCallback endpoint.
	GoogleCallbackDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the Auth service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		MeDoer:              doer,
		GoogleLoginDoer:     doer,
		GoogleLogoutDoer:    doer,
		GoogleCallbackDoer:  doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Me returns an endpoint that makes HTTP requests to the Auth service Me
// server.
func (c *Client) Me() goa.Endpoint {
	var (
		decodeResponse = DecodeMeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Auth", "Me", err)
		}
		return decodeResponse(resp)
	}
}

// GoogleLogin returns an endpoint that makes HTTP requests to the Auth service
// Google login server.
func (c *Client) GoogleLogin() goa.Endpoint {
	var (
		decodeResponse = DecodeGoogleLoginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGoogleLoginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GoogleLoginDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Auth", "Google login", err)
		}
		return decodeResponse(resp)
	}
}

// GoogleLogout returns an endpoint that makes HTTP requests to the Auth
// service Google logout server.
func (c *Client) GoogleLogout() goa.Endpoint {
	var (
		decodeResponse = DecodeGoogleLogoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGoogleLogoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GoogleLogoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Auth", "Google logout", err)
		}
		return decodeResponse(resp)
	}
}

// GoogleCallback returns an endpoint that makes HTTP requests to the Auth
// service GoogleCallback server.
func (c *Client) GoogleCallback() goa.Endpoint {
	var (
		decodeResponse = DecodeGoogleCallbackResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGoogleCallbackRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GoogleCallbackDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("Auth", "GoogleCallback", err)
		}
		return decodeResponse(resp)
	}
}
