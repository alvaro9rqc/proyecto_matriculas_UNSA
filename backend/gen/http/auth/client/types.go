// Code generated by goa v3.21.0, DO NOT EDIT.
//
// Auth HTTP client types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	auth "github.com/enrollment/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// MeOKResponseBody is the type of the "Auth" service "Me" endpoint HTTP
// response body.
type MeOKResponseBody struct {
	// Unique user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User first name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// User last names
	LastNames *string `form:"lastNames,omitempty" json:"lastNames,omitempty" xml:"lastNames,omitempty"`
	// User remaining names
	RemainingNames *string `form:"remainingNames,omitempty" json:"remainingNames,omitempty" xml:"remainingNames,omitempty"`
}

// MeUnauthorizedResponseBody is used to define fields on response body types.
type MeUnauthorizedResponseBody struct {
	// Unique user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User first name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// User last names
	LastNames *string `form:"lastNames,omitempty" json:"lastNames,omitempty" xml:"lastNames,omitempty"`
	// User remaining names
	RemainingNames *string `form:"remainingNames,omitempty" json:"remainingNames,omitempty" xml:"remainingNames,omitempty"`
}

// NewMeAccountUserOK builds a "Auth" service "Me" endpoint result from a HTTP
// "OK" response.
func NewMeAccountUserOK(body *MeOKResponseBody) *auth.AccountUser {
	v := &auth.AccountUser{
		ID:             *body.ID,
		Email:          *body.Email,
		FirstName:      *body.FirstName,
		LastNames:      *body.LastNames,
		RemainingNames: *body.RemainingNames,
	}

	return v
}

// ValidateMeOKResponseBody runs the validations defined on MeOKResponseBody
func ValidateMeOKResponseBody(body *MeOKResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastNames == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastNames", "body"))
	}
	if body.RemainingNames == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("remainingNames", "body"))
	}
	return
}

// ValidateMeUnauthorizedResponseBody runs the validations defined on
// MeUnauthorizedResponseBody
func ValidateMeUnauthorizedResponseBody(body *MeUnauthorizedResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastNames == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastNames", "body"))
	}
	if body.RemainingNames == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("remainingNames", "body"))
	}
	return
}
