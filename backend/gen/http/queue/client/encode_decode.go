// Code generated by goa v3.21.1, DO NOT EDIT.
//
// queue HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildEnqueueRequest instantiates a HTTP request object with method and path
// set to call the "queue" service "enqueue" endpoint
func (c *Client) BuildEnqueueRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EnqueueQueuePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("queue", "enqueue", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeEnqueueResponse returns a decoder for responses returned by the queue
// enqueue endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeEnqueueResponse may return the following errors:
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "un_authorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeEnqueueResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body EnqueueBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("queue", "enqueue", err)
			}
			err = ValidateEnqueueBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("queue", "enqueue", err)
			}
			return nil, NewEnqueueBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body EnqueueUnAuthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("queue", "enqueue", err)
			}
			err = ValidateEnqueueUnAuthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("queue", "enqueue", err)
			}
			return nil, NewEnqueueUnAuthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("queue", "enqueue", resp.StatusCode, string(body))
		}
	}
}

// BuildEnqueueSuscribeRequest instantiates a HTTP request object with method
// and path set to call the "queue" service "enqueue_suscribe" endpoint
func (c *Client) BuildEnqueueSuscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: EnqueueSuscribeQueuePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("queue", "enqueue_suscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeEnqueueSuscribeResponse returns a decoder for responses returned by
// the queue enqueue_suscribe endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeEnqueueSuscribeResponse may return the following errors:
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "un_authorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeEnqueueSuscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EnqueueSuscribeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("queue", "enqueue_suscribe", err)
			}
			res := NewEnqueueSuscribeResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body EnqueueSuscribeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("queue", "enqueue_suscribe", err)
			}
			err = ValidateEnqueueSuscribeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("queue", "enqueue_suscribe", err)
			}
			return nil, NewEnqueueSuscribeBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body EnqueueSuscribeUnAuthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("queue", "enqueue_suscribe", err)
			}
			err = ValidateEnqueueSuscribeUnAuthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("queue", "enqueue_suscribe", err)
			}
			return nil, NewEnqueueSuscribeUnAuthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("queue", "enqueue_suscribe", resp.StatusCode, string(body))
		}
	}
}
