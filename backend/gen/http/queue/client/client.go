// Code generated by goa v3.21.1, DO NOT EDIT.
//
// queue client HTTP transport
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"context"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the queue service endpoint HTTP clients.
type Client struct {
	// Enqueue Doer is the HTTP client used to make requests to the enqueue
	// endpoint.
	EnqueueDoer goahttp.Doer

	// EnqueueSuscribe Doer is the HTTP client used to make requests to the
	// enqueue_suscribe endpoint.
	EnqueueSuscribeDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme     string
	host       string
	encoder    func(*http.Request) goahttp.Encoder
	decoder    func(*http.Response) goahttp.Decoder
	dialer     goahttp.Dialer
	configurer *ConnConfigurer
}

// NewClient instantiates HTTP clients for all the queue service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
	dialer goahttp.Dialer,
	cfn *ConnConfigurer,
) *Client {
	if cfn == nil {
		cfn = &ConnConfigurer{}
	}
	return &Client{
		EnqueueDoer:         doer,
		EnqueueSuscribeDoer: doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
		dialer:              dialer,
		configurer:          cfn,
	}
}

// Enqueue returns an endpoint that makes HTTP requests to the queue service
// enqueue server.
func (c *Client) Enqueue() goa.Endpoint {
	var (
		decodeResponse = DecodeEnqueueResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildEnqueueRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EnqueueDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("queue", "enqueue", err)
		}
		return decodeResponse(resp)
	}
}

// EnqueueSuscribe returns an endpoint that makes HTTP requests to the queue
// service enqueue_suscribe server.
func (c *Client) EnqueueSuscribe() goa.Endpoint {
	var (
		decodeResponse = DecodeEnqueueSuscribeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildEnqueueSuscribeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		conn, resp, err := c.dialer.DialContext(ctx, req.URL.String(), req.Header)
		if err != nil {
			if resp != nil {
				return decodeResponse(resp)
			}
			return nil, goahttp.ErrRequestError("queue", "enqueue_suscribe", err)
		}
		if c.configurer.EnqueueSuscribeFn != nil {
			var cancel context.CancelFunc
			ctx, cancel = context.WithCancel(ctx)
			conn = c.configurer.EnqueueSuscribeFn(conn, cancel)
		}
		go func() {
			<-ctx.Done()
			conn.WriteControl(
				websocket.CloseMessage,
				websocket.FormatCloseMessage(websocket.CloseNormalClosure, "client closing connection"),
				time.Now().Add(time.Second),
			)
			conn.Close()
		}()
		stream := &EnqueueSuscribeClientStream{conn: conn}
		return stream, nil
	}
}
