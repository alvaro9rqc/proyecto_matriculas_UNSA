// Code generated by goa v3.21.1, DO NOT EDIT.
//
// queue WebSocket client streaming
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"context"
	"io"

	queue "github.com/enrollment/gen/queue"
	"github.com/gorilla/websocket"
	goahttp "goa.design/goa/v3/http"
)

// ConnConfigurer holds the websocket connection configurer functions for the
// streaming endpoints in "queue" service.
type ConnConfigurer struct {
	EnqueueSuscribeFn goahttp.ConnConfigureFunc
}

// EnqueueSuscribeClientStream implements the queue.EnqueueSuscribeClientStream
// interface.
type EnqueueSuscribeClientStream struct {
	// conn is the underlying websocket connection.
	conn *websocket.Conn
}

// NewConnConfigurer initializes the websocket connection configurer function
// with fn for all the streaming endpoints in "queue" service.
func NewConnConfigurer(fn goahttp.ConnConfigureFunc) *ConnConfigurer {
	return &ConnConfigurer{
		EnqueueSuscribeFn: fn,
	}
}

// Recv reads instances of "queue.EnqueueSuscribeResult" from the
// "enqueue_suscribe" endpoint websocket connection.
func (s *EnqueueSuscribeClientStream) Recv() (*queue.EnqueueSuscribeResult, error) {
	var (
		rv   *queue.EnqueueSuscribeResult
		body EnqueueSuscribeResponseBody
		err  error
	)
	err = s.conn.ReadJSON(&body)
	if websocket.IsCloseError(err, websocket.CloseNormalClosure) {
		s.conn.Close()
		return rv, io.EOF
	}
	if err != nil {
		return rv, err
	}
	res := NewEnqueueSuscribeResultOK(&body)
	return res, nil
}

// RecvWithContext reads instances of "queue.EnqueueSuscribeResult" from the
// "enqueue_suscribe" endpoint websocket connection with context.
func (s *EnqueueSuscribeClientStream) RecvWithContext(ctx context.Context) (*queue.EnqueueSuscribeResult, error) {
	return s.Recv()
}
