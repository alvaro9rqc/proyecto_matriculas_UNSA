// Code generated by goa v3.21.1, DO NOT EDIT.
//
// queue HTTP server types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	queue "github.com/enrollment/gen/queue"
	goa "goa.design/goa/v3/pkg"
)

// EnqueueSuscribeResponseBody is the type of the "queue" service
// "enqueue_suscribe" endpoint HTTP response body.
type EnqueueSuscribeResponseBody struct {
	// Position in the queue
	Position *int32 `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
	// Status of the queue
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Total number of students in the queue
	Total *int32 `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// EnqueueBadRequestResponseBody is the type of the "queue" service "enqueue"
// endpoint HTTP response body for the "bad_request" error.
type EnqueueBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EnqueueUnAuthorizedResponseBody is the type of the "queue" service "enqueue"
// endpoint HTTP response body for the "un_authorized" error.
type EnqueueUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EnqueueSuscribeBadRequestResponseBody is the type of the "queue" service
// "enqueue_suscribe" endpoint HTTP response body for the "bad_request" error.
type EnqueueSuscribeBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EnqueueSuscribeUnAuthorizedResponseBody is the type of the "queue" service
// "enqueue_suscribe" endpoint HTTP response body for the "un_authorized" error.
type EnqueueSuscribeUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewEnqueueSuscribeResponseBody builds the HTTP response body from the result
// of the "enqueue_suscribe" endpoint of the "queue" service.
func NewEnqueueSuscribeResponseBody(res *queue.EnqueueSuscribeResult) *EnqueueSuscribeResponseBody {
	body := &EnqueueSuscribeResponseBody{
		Position: res.Position,
		Status:   res.Status,
		Total:    res.Total,
	}
	return body
}

// NewEnqueueBadRequestResponseBody builds the HTTP response body from the
// result of the "enqueue" endpoint of the "queue" service.
func NewEnqueueBadRequestResponseBody(res *goa.ServiceError) *EnqueueBadRequestResponseBody {
	body := &EnqueueBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEnqueueUnAuthorizedResponseBody builds the HTTP response body from the
// result of the "enqueue" endpoint of the "queue" service.
func NewEnqueueUnAuthorizedResponseBody(res *goa.ServiceError) *EnqueueUnAuthorizedResponseBody {
	body := &EnqueueUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEnqueueSuscribeBadRequestResponseBody builds the HTTP response body from
// the result of the "enqueue_suscribe" endpoint of the "queue" service.
func NewEnqueueSuscribeBadRequestResponseBody(res *goa.ServiceError) *EnqueueSuscribeBadRequestResponseBody {
	body := &EnqueueSuscribeBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEnqueueSuscribeUnAuthorizedResponseBody builds the HTTP response body
// from the result of the "enqueue_suscribe" endpoint of the "queue" service.
func NewEnqueueSuscribeUnAuthorizedResponseBody(res *goa.ServiceError) *EnqueueSuscribeUnAuthorizedResponseBody {
	body := &EnqueueSuscribeUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}
