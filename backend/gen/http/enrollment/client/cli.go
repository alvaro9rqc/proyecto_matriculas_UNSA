// Code generated by goa v3.21.0, DO NOT EDIT.
//
// enrollment HTTP client CLI support package
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	enrollment "github.com/enrollment/gen/enrollment"
)

// BuildEnrollPayload builds the payload for the enrollment enroll endpoint
// from CLI flags.
func BuildEnrollPayload(enrollmentEnrollBody string) (*enrollment.EnrollmentPayload, error) {
	var err error
	var body EnrollRequestBody
	{
		err = json.Unmarshal([]byte(enrollmentEnrollBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"attendee_id\": 480923202,\n      \"course_id\": 1669339732,\n      \"passed\": true\n   }'")
		}
	}
	v := &enrollment.EnrollmentPayload{
		AttendeeID: body.AttendeeID,
		CourseID:   body.CourseID,
		Passed:     body.Passed,
	}

	return v, nil
}

// BuildUpdateEnrollmentPayload builds the payload for the enrollment
// update_enrollment endpoint from CLI flags.
func BuildUpdateEnrollmentPayload(enrollmentUpdateEnrollmentBody string) (*enrollment.UpdateEnrollmentPayload, error) {
	var err error
	var body UpdateEnrollmentRequestBody
	{
		err = json.Unmarshal([]byte(enrollmentUpdateEnrollmentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"attendee_id\": 222231779,\n      \"course_id\": 676456966,\n      \"passed\": true\n   }'")
		}
	}
	v := &enrollment.UpdateEnrollmentPayload{
		AttendeeID: body.AttendeeID,
		CourseID:   body.CourseID,
		Passed:     body.Passed,
	}

	return v, nil
}

// BuildDeleteEnrollmentPayload builds the payload for the enrollment
// delete_enrollment endpoint from CLI flags.
func BuildDeleteEnrollmentPayload(enrollmentDeleteEnrollmentAttendeeID string, enrollmentDeleteEnrollmentCourseID string) (*enrollment.DeleteEnrollmentPayload, error) {
	var err error
	var attendeeID int32
	{
		var v int64
		v, err = strconv.ParseInt(enrollmentDeleteEnrollmentAttendeeID, 10, 32)
		attendeeID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for attendeeID, must be INT32")
		}
	}
	var courseID int32
	{
		var v int64
		v, err = strconv.ParseInt(enrollmentDeleteEnrollmentCourseID, 10, 32)
		courseID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for courseID, must be INT32")
		}
	}
	v := &enrollment.DeleteEnrollmentPayload{}
	v.AttendeeID = attendeeID
	v.CourseID = courseID

	return v, nil
}

// BuildListEnrolledUsersPayload builds the payload for the enrollment
// list_enrolled_users endpoint from CLI flags.
func BuildListEnrolledUsersPayload(enrollmentListEnrolledUsersCourseID string) (*enrollment.ListEnrolledUsersPayload, error) {
	var err error
	var courseID int32
	{
		var v int64
		v, err = strconv.ParseInt(enrollmentListEnrolledUsersCourseID, 10, 32)
		courseID = int32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for courseID, must be INT32")
		}
	}
	v := &enrollment.ListEnrolledUsersPayload{}
	v.CourseID = courseID

	return v, nil
}
