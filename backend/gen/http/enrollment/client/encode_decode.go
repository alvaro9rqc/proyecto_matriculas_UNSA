// Code generated by goa v3.21.0, DO NOT EDIT.
//
// enrollment HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	enrollment "github.com/enrollment/gen/enrollment"
	goahttp "goa.design/goa/v3/http"
)

// BuildEnrollRequest instantiates a HTTP request object with method and path
// set to call the "enrollment" service "enroll" endpoint
func (c *Client) BuildEnrollRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EnrollEnrollmentPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("enrollment", "enroll", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEnrollRequest returns an encoder for requests sent to the enrollment
// enroll server.
func EncodeEnrollRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*enrollment.EnrollmentPayload)
		if !ok {
			return goahttp.ErrInvalidType("enrollment", "enroll", "*enrollment.EnrollmentPayload", v)
		}
		body := NewEnrollRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("enrollment", "enroll", err)
		}
		return nil
	}
}

// DecodeEnrollResponse returns a decoder for responses returned by the
// enrollment enroll endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeEnrollResponse may return the following errors:
//   - "un_authorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeEnrollResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body EnrollUnAuthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("enrollment", "enroll", err)
			}
			err = ValidateEnrollUnAuthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("enrollment", "enroll", err)
			}
			return nil, NewEnrollUnAuthorized(&body)
		case http.StatusBadRequest:
			var (
				body EnrollBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("enrollment", "enroll", err)
			}
			err = ValidateEnrollBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("enrollment", "enroll", err)
			}
			return nil, NewEnrollBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("enrollment", "enroll", resp.StatusCode, string(body))
		}
	}
}

// BuildGetEnrollmentCoursesRequest instantiates a HTTP request object with
// method and path set to call the "enrollment" service
// "get_enrollment_courses" endpoint
func (c *Client) BuildGetEnrollmentCoursesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetEnrollmentCoursesEnrollmentPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("enrollment", "get_enrollment_courses", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetEnrollmentCoursesResponse returns a decoder for responses returned
// by the enrollment get_enrollment_courses endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetEnrollmentCoursesResponse may return the following errors:
//   - "un_authorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeGetEnrollmentCoursesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetEnrollmentCoursesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("enrollment", "get_enrollment_courses", err)
			}
			err = ValidateGetEnrollmentCoursesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("enrollment", "get_enrollment_courses", err)
			}
			res := NewGetEnrollmentCoursesEnrollmentPayloadOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetEnrollmentCoursesUnAuthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("enrollment", "get_enrollment_courses", err)
			}
			err = ValidateGetEnrollmentCoursesUnAuthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("enrollment", "get_enrollment_courses", err)
			}
			return nil, NewGetEnrollmentCoursesUnAuthorized(&body)
		case http.StatusBadRequest:
			var (
				body GetEnrollmentCoursesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("enrollment", "get_enrollment_courses", err)
			}
			err = ValidateGetEnrollmentCoursesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("enrollment", "get_enrollment_courses", err)
			}
			return nil, NewGetEnrollmentCoursesBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("enrollment", "get_enrollment_courses", resp.StatusCode, string(body))
		}
	}
}

// marshalEnrollmentEnrollCourseTypeToEnrollCourseTypeRequestBody builds a
// value of type *EnrollCourseTypeRequestBody from a value of type
// *enrollment.EnrollCourseType.
func marshalEnrollmentEnrollCourseTypeToEnrollCourseTypeRequestBody(v *enrollment.EnrollCourseType) *EnrollCourseTypeRequestBody {
	res := &EnrollCourseTypeRequestBody{
		ID:        v.ID,
		CourseID:  v.CourseID,
		ProgramID: v.ProgramID,
	}

	return res
}

// marshalEnrollCourseTypeRequestBodyToEnrollmentEnrollCourseType builds a
// value of type *enrollment.EnrollCourseType from a value of type
// *EnrollCourseTypeRequestBody.
func marshalEnrollCourseTypeRequestBodyToEnrollmentEnrollCourseType(v *EnrollCourseTypeRequestBody) *enrollment.EnrollCourseType {
	res := &enrollment.EnrollCourseType{
		ID:        v.ID,
		CourseID:  v.CourseID,
		ProgramID: v.ProgramID,
	}

	return res
}

// unmarshalEnrollCourseTypeResponseBodyToEnrollmentEnrollCourseType builds a
// value of type *enrollment.EnrollCourseType from a value of type
// *EnrollCourseTypeResponseBody.
func unmarshalEnrollCourseTypeResponseBodyToEnrollmentEnrollCourseType(v *EnrollCourseTypeResponseBody) *enrollment.EnrollCourseType {
	res := &enrollment.EnrollCourseType{
		ID:        *v.ID,
		CourseID:  *v.CourseID,
		ProgramID: *v.ProgramID,
	}

	return res
}
