// Code generated by goa v3.21.0, DO NOT EDIT.
//
// enrollment HTTP client types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	enrollment "github.com/enrollment/gen/enrollment"
	goa "goa.design/goa/v3/pkg"
)

// EnrollRequestBody is the type of the "enrollment" service "enroll" endpoint
// HTTP request body.
type EnrollRequestBody struct {
	// Attendee ID
	EnrollCourses []*EnrollCourseTypeRequestBody `form:"enrollCourses" json:"enrollCourses" xml:"enrollCourses"`
}

// GetEnrollmentCoursesResponseBody is the type of the "enrollment" service
// "get_enrollment_courses" endpoint HTTP response body.
type GetEnrollmentCoursesResponseBody struct {
	// Attendee ID
	EnrollCourses []*EnrollCourseTypeResponseBody `form:"enrollCourses,omitempty" json:"enrollCourses,omitempty" xml:"enrollCourses,omitempty"`
}

// EnrollUnAuthorizedResponseBody is the type of the "enrollment" service
// "enroll" endpoint HTTP response body for the "un_authorized" error.
type EnrollUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EnrollBadRequestResponseBody is the type of the "enrollment" service
// "enroll" endpoint HTTP response body for the "bad_request" error.
type EnrollBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetEnrollmentCoursesUnAuthorizedResponseBody is the type of the "enrollment"
// service "get_enrollment_courses" endpoint HTTP response body for the
// "un_authorized" error.
type GetEnrollmentCoursesUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetEnrollmentCoursesBadRequestResponseBody is the type of the "enrollment"
// service "get_enrollment_courses" endpoint HTTP response body for the
// "bad_request" error.
type GetEnrollmentCoursesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EnrollCourseTypeRequestBody is used to define fields on request body types.
type EnrollCourseTypeRequestBody struct {
	// Enrollment ID
	ID int32 `form:"id" json:"id" xml:"id"`
	// Course ID
	CourseID int32 `form:"course_id" json:"course_id" xml:"course_id"`
	// Program ID
	ProgramID int32 `form:"program_id" json:"program_id" xml:"program_id"`
}

// EnrollCourseTypeResponseBody is used to define fields on response body types.
type EnrollCourseTypeResponseBody struct {
	// Enrollment ID
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Course ID
	CourseID *int32 `form:"course_id,omitempty" json:"course_id,omitempty" xml:"course_id,omitempty"`
	// Program ID
	ProgramID *int32 `form:"program_id,omitempty" json:"program_id,omitempty" xml:"program_id,omitempty"`
}

// NewEnrollRequestBody builds the HTTP request body from the payload of the
// "enroll" endpoint of the "enrollment" service.
func NewEnrollRequestBody(p *enrollment.EnrollmentPayload) *EnrollRequestBody {
	body := &EnrollRequestBody{}
	if p.EnrollCourses != nil {
		body.EnrollCourses = make([]*EnrollCourseTypeRequestBody, len(p.EnrollCourses))
		for i, val := range p.EnrollCourses {
			body.EnrollCourses[i] = marshalEnrollmentEnrollCourseTypeToEnrollCourseTypeRequestBody(val)
		}
	} else {
		body.EnrollCourses = []*EnrollCourseTypeRequestBody{}
	}
	return body
}

// NewEnrollUnAuthorized builds a enrollment service enroll endpoint
// un_authorized error.
func NewEnrollUnAuthorized(body *EnrollUnAuthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEnrollBadRequest builds a enrollment service enroll endpoint bad_request
// error.
func NewEnrollBadRequest(body *EnrollBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetEnrollmentCoursesEnrollmentPayloadOK builds a "enrollment" service
// "get_enrollment_courses" endpoint result from a HTTP "OK" response.
func NewGetEnrollmentCoursesEnrollmentPayloadOK(body *GetEnrollmentCoursesResponseBody) *enrollment.EnrollmentPayload {
	v := &enrollment.EnrollmentPayload{}
	v.EnrollCourses = make([]*enrollment.EnrollCourseType, len(body.EnrollCourses))
	for i, val := range body.EnrollCourses {
		v.EnrollCourses[i] = unmarshalEnrollCourseTypeResponseBodyToEnrollmentEnrollCourseType(val)
	}

	return v
}

// NewGetEnrollmentCoursesUnAuthorized builds a enrollment service
// get_enrollment_courses endpoint un_authorized error.
func NewGetEnrollmentCoursesUnAuthorized(body *GetEnrollmentCoursesUnAuthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetEnrollmentCoursesBadRequest builds a enrollment service
// get_enrollment_courses endpoint bad_request error.
func NewGetEnrollmentCoursesBadRequest(body *GetEnrollmentCoursesBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetEnrollmentCoursesResponseBody runs the validations defined on
// get_enrollment_courses_response_body
func ValidateGetEnrollmentCoursesResponseBody(body *GetEnrollmentCoursesResponseBody) (err error) {
	if body.EnrollCourses == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enrollCourses", "body"))
	}
	for _, e := range body.EnrollCourses {
		if e != nil {
			if err2 := ValidateEnrollCourseTypeResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEnrollUnAuthorizedResponseBody runs the validations defined on
// enroll_un_authorized_response_body
func ValidateEnrollUnAuthorizedResponseBody(body *EnrollUnAuthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEnrollBadRequestResponseBody runs the validations defined on
// enroll_bad_request_response_body
func ValidateEnrollBadRequestResponseBody(body *EnrollBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetEnrollmentCoursesUnAuthorizedResponseBody runs the validations
// defined on get_enrollment_courses_un_authorized_response_body
func ValidateGetEnrollmentCoursesUnAuthorizedResponseBody(body *GetEnrollmentCoursesUnAuthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetEnrollmentCoursesBadRequestResponseBody runs the validations
// defined on get_enrollment_courses_bad_request_response_body
func ValidateGetEnrollmentCoursesBadRequestResponseBody(body *GetEnrollmentCoursesBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEnrollCourseTypeResponseBody runs the validations defined on
// EnrollCourseTypeResponseBody
func ValidateEnrollCourseTypeResponseBody(body *EnrollCourseTypeResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CourseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("course_id", "body"))
	}
	if body.ProgramID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("program_id", "body"))
	}
	return
}
