// Code generated by goa v3.21.0, DO NOT EDIT.
//
// enrollment HTTP client types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	enrollment "github.com/enrollment/gen/enrollment"
	goa "goa.design/goa/v3/pkg"
)

// EnrollRequestBody is the type of the "enrollment" service "enroll" endpoint
// HTTP request body.
type EnrollRequestBody struct {
	// ID del asistente
	AttendeeID int32 `form:"attendee_id" json:"attendee_id" xml:"attendee_id"`
	// ID del curso
	CourseID int32 `form:"course_id" json:"course_id" xml:"course_id"`
	// Si el curso fue aprobado
	Passed bool `form:"passed" json:"passed" xml:"passed"`
}

// UpdateEnrollmentRequestBody is the type of the "enrollment" service
// "update_enrollment" endpoint HTTP request body.
type UpdateEnrollmentRequestBody struct {
	// ID del asistente
	AttendeeID int32 `form:"attendee_id" json:"attendee_id" xml:"attendee_id"`
	// ID del curso
	CourseID int32 `form:"course_id" json:"course_id" xml:"course_id"`
	// Nuevo estado aprobado
	Passed bool `form:"passed" json:"passed" xml:"passed"`
}

// ListEnrolledUsersResponseBody is the type of the "enrollment" service
// "list_enrolled_users" endpoint HTTP response body.
type ListEnrolledUsersResponseBody []*EnrolledUserResponse

// EnrollBadRequestResponseBody is the type of the "enrollment" service
// "enroll" endpoint HTTP response body for the "bad_request" error.
type EnrollBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateEnrollmentNotFoundResponseBody is the type of the "enrollment" service
// "update_enrollment" endpoint HTTP response body for the "not_found" error.
type UpdateEnrollmentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteEnrollmentNotFoundResponseBody is the type of the "enrollment" service
// "delete_enrollment" endpoint HTTP response body for the "not_found" error.
type DeleteEnrollmentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListEnrolledUsersNotFoundResponseBody is the type of the "enrollment"
// service "list_enrolled_users" endpoint HTTP response body for the
// "not_found" error.
type ListEnrolledUsersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EnrolledUserResponse is used to define fields on response body types.
type EnrolledUserResponse struct {
	FirstName      *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	RemainingNames *string `form:"remaining_names,omitempty" json:"remaining_names,omitempty" xml:"remaining_names,omitempty"`
	LastNames      *string `form:"last_names,omitempty" json:"last_names,omitempty" xml:"last_names,omitempty"`
	Email          *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// NewEnrollRequestBody builds the HTTP request body from the payload of the
// "enroll" endpoint of the "enrollment" service.
func NewEnrollRequestBody(p *enrollment.EnrollmentPayload) *EnrollRequestBody {
	body := &EnrollRequestBody{
		AttendeeID: p.AttendeeID,
		CourseID:   p.CourseID,
		Passed:     p.Passed,
	}
	return body
}

// NewUpdateEnrollmentRequestBody builds the HTTP request body from the payload
// of the "update_enrollment" endpoint of the "enrollment" service.
func NewUpdateEnrollmentRequestBody(p *enrollment.UpdateEnrollmentPayload) *UpdateEnrollmentRequestBody {
	body := &UpdateEnrollmentRequestBody{
		AttendeeID: p.AttendeeID,
		CourseID:   p.CourseID,
		Passed:     p.Passed,
	}
	return body
}

// NewEnrollBadRequest builds a enrollment service enroll endpoint bad_request
// error.
func NewEnrollBadRequest(body *EnrollBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateEnrollmentNotFound builds a enrollment service update_enrollment
// endpoint not_found error.
func NewUpdateEnrollmentNotFound(body *UpdateEnrollmentNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteEnrollmentNotFound builds a enrollment service delete_enrollment
// endpoint not_found error.
func NewDeleteEnrollmentNotFound(body *DeleteEnrollmentNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListEnrolledUsersEnrolledUserOK builds a "enrollment" service
// "list_enrolled_users" endpoint result from a HTTP "OK" response.
func NewListEnrolledUsersEnrolledUserOK(body []*EnrolledUserResponse) []*enrollment.EnrolledUser {
	v := make([]*enrollment.EnrolledUser, len(body))
	for i, val := range body {
		v[i] = unmarshalEnrolledUserResponseToEnrollmentEnrolledUser(val)
	}

	return v
}

// NewListEnrolledUsersNotFound builds a enrollment service list_enrolled_users
// endpoint not_found error.
func NewListEnrolledUsersNotFound(body *ListEnrolledUsersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateEnrollBadRequestResponseBody runs the validations defined on
// enroll_bad_request_response_body
func ValidateEnrollBadRequestResponseBody(body *EnrollBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateEnrollmentNotFoundResponseBody runs the validations defined on
// update_enrollment_not_found_response_body
func ValidateUpdateEnrollmentNotFoundResponseBody(body *UpdateEnrollmentNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteEnrollmentNotFoundResponseBody runs the validations defined on
// delete_enrollment_not_found_response_body
func ValidateDeleteEnrollmentNotFoundResponseBody(body *DeleteEnrollmentNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListEnrolledUsersNotFoundResponseBody runs the validations defined
// on list_enrolled_users_not_found_response_body
func ValidateListEnrolledUsersNotFoundResponseBody(body *ListEnrolledUsersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEnrolledUserResponse runs the validations defined on
// EnrolledUserResponse
func ValidateEnrolledUserResponse(body *EnrolledUserResponse) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("first_name", "body"))
	}
	if body.LastNames == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("last_names", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	return
}
