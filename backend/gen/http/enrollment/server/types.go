// Code generated by goa v3.21.0, DO NOT EDIT.
//
// enrollment HTTP server types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	enrollment "github.com/enrollment/gen/enrollment"
	goa "goa.design/goa/v3/pkg"
)

// EnrollRequestBody is the type of the "enrollment" service "enroll" endpoint
// HTTP request body.
type EnrollRequestBody struct {
	// ID del asistente
	AttendeeID *int32 `form:"attendee_id,omitempty" json:"attendee_id,omitempty" xml:"attendee_id,omitempty"`
	// ID del curso
	CourseID *int32 `form:"course_id,omitempty" json:"course_id,omitempty" xml:"course_id,omitempty"`
	// Si el curso fue aprobado
	Passed *bool `form:"passed,omitempty" json:"passed,omitempty" xml:"passed,omitempty"`
}

// UpdateEnrollmentRequestBody is the type of the "enrollment" service
// "update_enrollment" endpoint HTTP request body.
type UpdateEnrollmentRequestBody struct {
	// ID del asistente
	AttendeeID *int32 `form:"attendee_id,omitempty" json:"attendee_id,omitempty" xml:"attendee_id,omitempty"`
	// ID del curso
	CourseID *int32 `form:"course_id,omitempty" json:"course_id,omitempty" xml:"course_id,omitempty"`
	// Nuevo estado aprobado
	Passed *bool `form:"passed,omitempty" json:"passed,omitempty" xml:"passed,omitempty"`
}

// ListEnrolledUsersResponseBody is the type of the "enrollment" service
// "list_enrolled_users" endpoint HTTP response body.
type ListEnrolledUsersResponseBody []*EnrolledUserResponse

// EnrollBadRequestResponseBody is the type of the "enrollment" service
// "enroll" endpoint HTTP response body for the "bad_request" error.
type EnrollBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateEnrollmentNotFoundResponseBody is the type of the "enrollment" service
// "update_enrollment" endpoint HTTP response body for the "not_found" error.
type UpdateEnrollmentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteEnrollmentNotFoundResponseBody is the type of the "enrollment" service
// "delete_enrollment" endpoint HTTP response body for the "not_found" error.
type DeleteEnrollmentNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListEnrolledUsersNotFoundResponseBody is the type of the "enrollment"
// service "list_enrolled_users" endpoint HTTP response body for the
// "not_found" error.
type ListEnrolledUsersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EnrolledUserResponse is used to define fields on response body types.
type EnrolledUserResponse struct {
	FirstName      string  `form:"first_name" json:"first_name" xml:"first_name"`
	RemainingNames *string `form:"remaining_names,omitempty" json:"remaining_names,omitempty" xml:"remaining_names,omitempty"`
	LastNames      string  `form:"last_names" json:"last_names" xml:"last_names"`
	Email          string  `form:"email" json:"email" xml:"email"`
}

// NewListEnrolledUsersResponseBody builds the HTTP response body from the
// result of the "list_enrolled_users" endpoint of the "enrollment" service.
func NewListEnrolledUsersResponseBody(res []*enrollment.EnrolledUser) ListEnrolledUsersResponseBody {
	body := make([]*EnrolledUserResponse, len(res))
	for i, val := range res {
		body[i] = marshalEnrollmentEnrolledUserToEnrolledUserResponse(val)
	}
	return body
}

// NewEnrollBadRequestResponseBody builds the HTTP response body from the
// result of the "enroll" endpoint of the "enrollment" service.
func NewEnrollBadRequestResponseBody(res *goa.ServiceError) *EnrollBadRequestResponseBody {
	body := &EnrollBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateEnrollmentNotFoundResponseBody builds the HTTP response body from
// the result of the "update_enrollment" endpoint of the "enrollment" service.
func NewUpdateEnrollmentNotFoundResponseBody(res *goa.ServiceError) *UpdateEnrollmentNotFoundResponseBody {
	body := &UpdateEnrollmentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteEnrollmentNotFoundResponseBody builds the HTTP response body from
// the result of the "delete_enrollment" endpoint of the "enrollment" service.
func NewDeleteEnrollmentNotFoundResponseBody(res *goa.ServiceError) *DeleteEnrollmentNotFoundResponseBody {
	body := &DeleteEnrollmentNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListEnrolledUsersNotFoundResponseBody builds the HTTP response body from
// the result of the "list_enrolled_users" endpoint of the "enrollment" service.
func NewListEnrolledUsersNotFoundResponseBody(res *goa.ServiceError) *ListEnrolledUsersNotFoundResponseBody {
	body := &ListEnrolledUsersNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEnrollmentPayload builds a enrollment service enroll endpoint payload.
func NewEnrollmentPayload(body *EnrollRequestBody) *enrollment.EnrollmentPayload {
	v := &enrollment.EnrollmentPayload{
		AttendeeID: *body.AttendeeID,
		CourseID:   *body.CourseID,
		Passed:     *body.Passed,
	}

	return v
}

// NewUpdateEnrollmentPayload builds a enrollment service update_enrollment
// endpoint payload.
func NewUpdateEnrollmentPayload(body *UpdateEnrollmentRequestBody) *enrollment.UpdateEnrollmentPayload {
	v := &enrollment.UpdateEnrollmentPayload{
		AttendeeID: *body.AttendeeID,
		CourseID:   *body.CourseID,
		Passed:     *body.Passed,
	}

	return v
}

// NewDeleteEnrollmentPayload builds a enrollment service delete_enrollment
// endpoint payload.
func NewDeleteEnrollmentPayload(attendeeID int32, courseID int32) *enrollment.DeleteEnrollmentPayload {
	v := &enrollment.DeleteEnrollmentPayload{}
	v.AttendeeID = attendeeID
	v.CourseID = courseID

	return v
}

// NewListEnrolledUsersPayload builds a enrollment service list_enrolled_users
// endpoint payload.
func NewListEnrolledUsersPayload(courseID int32) *enrollment.ListEnrolledUsersPayload {
	v := &enrollment.ListEnrolledUsersPayload{}
	v.CourseID = courseID

	return v
}

// ValidateEnrollRequestBody runs the validations defined on EnrollRequestBody
func ValidateEnrollRequestBody(body *EnrollRequestBody) (err error) {
	if body.AttendeeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("attendee_id", "body"))
	}
	if body.CourseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("course_id", "body"))
	}
	if body.Passed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("passed", "body"))
	}
	return
}

// ValidateUpdateEnrollmentRequestBody runs the validations defined on
// update_enrollment_request_body
func ValidateUpdateEnrollmentRequestBody(body *UpdateEnrollmentRequestBody) (err error) {
	if body.AttendeeID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("attendee_id", "body"))
	}
	if body.CourseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("course_id", "body"))
	}
	if body.Passed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("passed", "body"))
	}
	return
}
