// Code generated by goa v3.21.1, DO NOT EDIT.
//
// enrollment HTTP server types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	enrollment "github.com/enrollment/gen/enrollment"
	goa "goa.design/goa/v3/pkg"
)

// EnrollRequestBody is the type of the "enrollment" service "enroll" endpoint
// HTTP request body.
type EnrollRequestBody struct {
	// Attendee ID
	EnrollCourses []*EnrollCourseTypeRequestBody `form:"enrollCourses,omitempty" json:"enrollCourses,omitempty" xml:"enrollCourses,omitempty"`
}

// GetEnrollmentCoursesResponseBody is the type of the "enrollment" service
// "get_enrollment_courses" endpoint HTTP response body.
type GetEnrollmentCoursesResponseBody struct {
	// Attendee ID
	EnrollCourses []*EnrollCourseTypeResponseBody `form:"enrollCourses" json:"enrollCourses" xml:"enrollCourses"`
}

// EnrollUnAuthorizedResponseBody is the type of the "enrollment" service
// "enroll" endpoint HTTP response body for the "un_authorized" error.
type EnrollUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EnrollBadRequestResponseBody is the type of the "enrollment" service
// "enroll" endpoint HTTP response body for the "bad_request" error.
type EnrollBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetEnrollmentCoursesUnAuthorizedResponseBody is the type of the "enrollment"
// service "get_enrollment_courses" endpoint HTTP response body for the
// "un_authorized" error.
type GetEnrollmentCoursesUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetEnrollmentCoursesBadRequestResponseBody is the type of the "enrollment"
// service "get_enrollment_courses" endpoint HTTP response body for the
// "bad_request" error.
type GetEnrollmentCoursesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EnrollCourseTypeResponseBody is used to define fields on response body types.
type EnrollCourseTypeResponseBody struct {
	// Enrollment ID
	ID int32 `form:"id" json:"id" xml:"id"`
	// Course ID
	CourseID int32 `form:"course_id" json:"course_id" xml:"course_id"`
	// Program ID
	ProgramID int32 `form:"program_id" json:"program_id" xml:"program_id"`
}

// EnrollCourseTypeRequestBody is used to define fields on request body types.
type EnrollCourseTypeRequestBody struct {
	// Enrollment ID
	ID *int32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Course ID
	CourseID *int32 `form:"course_id,omitempty" json:"course_id,omitempty" xml:"course_id,omitempty"`
	// Program ID
	ProgramID *int32 `form:"program_id,omitempty" json:"program_id,omitempty" xml:"program_id,omitempty"`
}

// NewGetEnrollmentCoursesResponseBody builds the HTTP response body from the
// result of the "get_enrollment_courses" endpoint of the "enrollment" service.
func NewGetEnrollmentCoursesResponseBody(res *enrollment.EnrollmentPayload) *GetEnrollmentCoursesResponseBody {
	body := &GetEnrollmentCoursesResponseBody{}
	if res.EnrollCourses != nil {
		body.EnrollCourses = make([]*EnrollCourseTypeResponseBody, len(res.EnrollCourses))
		for i, val := range res.EnrollCourses {
			body.EnrollCourses[i] = marshalEnrollmentEnrollCourseTypeToEnrollCourseTypeResponseBody(val)
		}
	} else {
		body.EnrollCourses = []*EnrollCourseTypeResponseBody{}
	}
	return body
}

// NewEnrollUnAuthorizedResponseBody builds the HTTP response body from the
// result of the "enroll" endpoint of the "enrollment" service.
func NewEnrollUnAuthorizedResponseBody(res *goa.ServiceError) *EnrollUnAuthorizedResponseBody {
	body := &EnrollUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEnrollBadRequestResponseBody builds the HTTP response body from the
// result of the "enroll" endpoint of the "enrollment" service.
func NewEnrollBadRequestResponseBody(res *goa.ServiceError) *EnrollBadRequestResponseBody {
	body := &EnrollBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetEnrollmentCoursesUnAuthorizedResponseBody builds the HTTP response
// body from the result of the "get_enrollment_courses" endpoint of the
// "enrollment" service.
func NewGetEnrollmentCoursesUnAuthorizedResponseBody(res *goa.ServiceError) *GetEnrollmentCoursesUnAuthorizedResponseBody {
	body := &GetEnrollmentCoursesUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetEnrollmentCoursesBadRequestResponseBody builds the HTTP response body
// from the result of the "get_enrollment_courses" endpoint of the "enrollment"
// service.
func NewGetEnrollmentCoursesBadRequestResponseBody(res *goa.ServiceError) *GetEnrollmentCoursesBadRequestResponseBody {
	body := &GetEnrollmentCoursesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEnrollmentPayload builds a enrollment service enroll endpoint payload.
func NewEnrollmentPayload(body *EnrollRequestBody) *enrollment.EnrollmentPayload {
	v := &enrollment.EnrollmentPayload{}
	v.EnrollCourses = make([]*enrollment.EnrollCourseType, len(body.EnrollCourses))
	for i, val := range body.EnrollCourses {
		v.EnrollCourses[i] = unmarshalEnrollCourseTypeRequestBodyToEnrollmentEnrollCourseType(val)
	}

	return v
}

// ValidateEnrollRequestBody runs the validations defined on EnrollRequestBody
func ValidateEnrollRequestBody(body *EnrollRequestBody) (err error) {
	if body.EnrollCourses == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("enrollCourses", "body"))
	}
	for _, e := range body.EnrollCourses {
		if e != nil {
			if err2 := ValidateEnrollCourseTypeRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateEnrollCourseTypeRequestBody runs the validations defined on
// EnrollCourseTypeRequestBody
func ValidateEnrollCourseTypeRequestBody(body *EnrollCourseTypeRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.CourseID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("course_id", "body"))
	}
	if body.ProgramID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("program_id", "body"))
	}
	return
}
