// Code generated by goa v3.21.0, DO NOT EDIT.
//
// enrollment HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	enrollment "github.com/enrollment/gen/enrollment"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeEnrollResponse returns an encoder for responses returned by the
// enrollment enroll endpoint.
func EncodeEnrollResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeEnrollRequest returns a decoder for requests sent to the enrollment
// enroll endpoint.
func DecodeEnrollRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body EnrollRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateEnrollRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewEnrollmentPayload(&body)

		return payload, nil
	}
}

// EncodeEnrollError returns an encoder for errors returned by the enroll
// enrollment endpoint.
func EncodeEnrollError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "un_authorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewEnrollUnAuthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewEnrollBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetEnrollmentCoursesResponse returns an encoder for responses returned
// by the enrollment get_enrollment_courses endpoint.
func EncodeGetEnrollmentCoursesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*enrollment.EnrollmentPayload)
		enc := encoder(ctx, w)
		body := NewGetEnrollmentCoursesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetEnrollmentCoursesError returns an encoder for errors returned by
// the get_enrollment_courses enrollment endpoint.
func EncodeGetEnrollmentCoursesError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "un_authorized":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetEnrollmentCoursesUnAuthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetEnrollmentCoursesBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalEnrollCourseTypeRequestBodyToEnrollmentEnrollCourseType builds a
// value of type *enrollment.EnrollCourseType from a value of type
// *EnrollCourseTypeRequestBody.
func unmarshalEnrollCourseTypeRequestBodyToEnrollmentEnrollCourseType(v *EnrollCourseTypeRequestBody) *enrollment.EnrollCourseType {
	res := &enrollment.EnrollCourseType{
		ID:        *v.ID,
		CourseID:  *v.CourseID,
		ProgramID: *v.ProgramID,
	}

	return res
}

// marshalEnrollmentEnrollCourseTypeToEnrollCourseTypeResponseBody builds a
// value of type *EnrollCourseTypeResponseBody from a value of type
// *enrollment.EnrollCourseType.
func marshalEnrollmentEnrollCourseTypeToEnrollCourseTypeResponseBody(v *enrollment.EnrollCourseType) *EnrollCourseTypeResponseBody {
	res := &EnrollCourseTypeResponseBody{
		ID:        v.ID,
		CourseID:  v.CourseID,
		ProgramID: v.ProgramID,
	}

	return res
}
