// Code generated by goa v3.21.0, DO NOT EDIT.
//
// enrollment HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"

	enrollment "github.com/enrollment/gen/enrollment"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeEnrollResponse returns an encoder for responses returned by the
// enrollment enroll endpoint.
func EncodeEnrollResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeEnrollRequest returns a decoder for requests sent to the enrollment
// enroll endpoint.
func DecodeEnrollRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body EnrollRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateEnrollRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewEnrollmentPayload(&body)

		return payload, nil
	}
}

// EncodeEnrollError returns an encoder for errors returned by the enroll
// enrollment endpoint.
func EncodeEnrollError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "bad_request":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewEnrollBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdateEnrollmentResponse returns an encoder for responses returned by
// the enrollment update_enrollment endpoint.
func EncodeUpdateEnrollmentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUpdateEnrollmentRequest returns a decoder for requests sent to the
// enrollment update_enrollment endpoint.
func DecodeUpdateEnrollmentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateEnrollmentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateEnrollmentRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpdateEnrollmentPayload(&body)

		return payload, nil
	}
}

// EncodeUpdateEnrollmentError returns an encoder for errors returned by the
// update_enrollment enrollment endpoint.
func EncodeUpdateEnrollmentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewUpdateEnrollmentNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeDeleteEnrollmentResponse returns an encoder for responses returned by
// the enrollment delete_enrollment endpoint.
func EncodeDeleteEnrollmentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteEnrollmentRequest returns a decoder for requests sent to the
// enrollment delete_enrollment endpoint.
func DecodeDeleteEnrollmentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			attendeeID int32
			courseID   int32
			err        error

			params = mux.Vars(r)
		)
		{
			attendeeIDRaw := params["attendee_id"]
			v, err2 := strconv.ParseInt(attendeeIDRaw, 10, 32)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("attendee_id", attendeeIDRaw, "integer"))
			}
			attendeeID = int32(v)
		}
		{
			courseIDRaw := params["course_id"]
			v, err2 := strconv.ParseInt(courseIDRaw, 10, 32)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("course_id", courseIDRaw, "integer"))
			}
			courseID = int32(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteEnrollmentPayload(attendeeID, courseID)

		return payload, nil
	}
}

// EncodeDeleteEnrollmentError returns an encoder for errors returned by the
// delete_enrollment enrollment endpoint.
func EncodeDeleteEnrollmentError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewDeleteEnrollmentNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeListEnrolledUsersResponse returns an encoder for responses returned by
// the enrollment list_enrolled_users endpoint.
func EncodeListEnrolledUsersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*enrollment.EnrolledUser)
		enc := encoder(ctx, w)
		body := NewListEnrolledUsersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListEnrolledUsersRequest returns a decoder for requests sent to the
// enrollment list_enrolled_users endpoint.
func DecodeListEnrolledUsersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			courseID int32
			err      error

			params = mux.Vars(r)
		)
		{
			courseIDRaw := params["course_id"]
			v, err2 := strconv.ParseInt(courseIDRaw, 10, 32)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("course_id", courseIDRaw, "integer"))
			}
			courseID = int32(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewListEnrolledUsersPayload(courseID)

		return payload, nil
	}
}

// EncodeListEnrolledUsersError returns an encoder for errors returned by the
// list_enrolled_users enrollment endpoint.
func EncodeListEnrolledUsersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewListEnrolledUsersNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalEnrollmentEnrolledUserToEnrolledUserResponse builds a value of type
// *EnrolledUserResponse from a value of type *enrollment.EnrolledUser.
func marshalEnrollmentEnrolledUserToEnrolledUserResponse(v *enrollment.EnrolledUser) *EnrolledUserResponse {
	res := &EnrolledUserResponse{
		FirstName:      v.FirstName,
		RemainingNames: v.RemainingNames,
		LastNames:      v.LastNames,
		Email:          v.Email,
	}

	return res
}
