// Code generated by goa v3.21.0, DO NOT EDIT.
//
// course HTTP client CLI support package
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"encoding/json"
	"fmt"

	course "github.com/enrollment/gen/course"
	goa "goa.design/goa/v3/pkg"
)

// BuildUploadAllCoursesPayload builds the payload for the course
// upload_all_courses endpoint from CLI flags.
func BuildUploadAllCoursesPayload(courseUploadAllCoursesBody string) (*course.UploadAllCoursesPayload, error) {
	var err error
	var body UploadAllCoursesRequestBody
	{
		err = json.Unmarshal([]byte(courseUploadAllCoursesBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"courses\": [\n         {\n            \"cicle_number\": 1,\n            \"credits\": 3,\n            \"name\": \"Introduction to Programming\"\n         },\n         {\n            \"cicle_number\": 1,\n            \"credits\": 3,\n            \"name\": \"Introduction to Programming\"\n         },\n         {\n            \"cicle_number\": 1,\n            \"credits\": 3,\n            \"name\": \"Introduction to Programming\"\n         },\n         {\n            \"cicle_number\": 1,\n            \"credits\": 3,\n            \"name\": \"Introduction to Programming\"\n         }\n      ]\n   }'")
		}
		if body.Courses == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("courses", "body"))
		}
		for _, e := range body.Courses {
			if e != nil {
				if err2 := ValidateCoursePayloadRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &course.UploadAllCoursesPayload{}
	if body.Courses != nil {
		v.Courses = make([]*course.CoursePayload, len(body.Courses))
		for i, val := range body.Courses {
			v.Courses[i] = marshalCoursePayloadRequestBodyToCourseCoursePayload(val)
		}
	} else {
		v.Courses = []*course.CoursePayload{}
	}

	return v, nil
}

// BuildGetAllCoursesPayload builds the payload for the course get_all_courses
// endpoint from CLI flags.
func BuildGetAllCoursesPayload(courseGetAllCoursesBody string) (*course.GetAllCoursesPayload, error) {
	var err error
	var body GetAllCoursesRequestBody
	{
		err = json.Unmarshal([]byte(courseGetAllCoursesBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"limit\": 3466669028225860434,\n      \"page\": 1330338610430196549\n   }'")
		}
		if body.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.page", body.Page, 1, true))
		}
		if body.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.limit", body.Limit, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &course.GetAllCoursesPayload{
		Page:  body.Page,
		Limit: body.Limit,
	}

	return v, nil
}
