// Code generated by goa v3.21.0, DO NOT EDIT.
//
// course client HTTP transport
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the course service endpoint HTTP clients.
type Client struct {
	// UploadAllCourses Doer is the HTTP client used to make requests to the
	// upload_all_courses endpoint.
	UploadAllCoursesDoer goahttp.Doer

	// GetAllCourses Doer is the HTTP client used to make requests to the
	// get_all_courses endpoint.
	GetAllCoursesDoer goahttp.Doer

	// GetUserAvailableCourses Doer is the HTTP client used to make requests to the
	// get_user_available_courses endpoint.
	GetUserAvailableCoursesDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the course service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		UploadAllCoursesDoer:        doer,
		GetAllCoursesDoer:           doer,
		GetUserAvailableCoursesDoer: doer,
		RestoreResponseBody:         restoreBody,
		scheme:                      scheme,
		host:                        host,
		decoder:                     dec,
		encoder:                     enc,
	}
}

// UploadAllCourses returns an endpoint that makes HTTP requests to the course
// service upload_all_courses server.
func (c *Client) UploadAllCourses() goa.Endpoint {
	var (
		encodeRequest  = EncodeUploadAllCoursesRequest(c.encoder)
		decodeResponse = DecodeUploadAllCoursesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUploadAllCoursesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UploadAllCoursesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("course", "upload_all_courses", err)
		}
		return decodeResponse(resp)
	}
}

// GetAllCourses returns an endpoint that makes HTTP requests to the course
// service get_all_courses server.
func (c *Client) GetAllCourses() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetAllCoursesRequest(c.encoder)
		decodeResponse = DecodeGetAllCoursesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetAllCoursesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetAllCoursesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("course", "get_all_courses", err)
		}
		return decodeResponse(resp)
	}
}

// GetUserAvailableCourses returns an endpoint that makes HTTP requests to the
// course service get_user_available_courses server.
func (c *Client) GetUserAvailableCourses() goa.Endpoint {
	var (
		decodeResponse = DecodeGetUserAvailableCoursesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetUserAvailableCoursesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserAvailableCoursesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("course", "get_user_available_courses", err)
		}
		return decodeResponse(resp)
	}
}
