// Code generated by goa v3.21.1, DO NOT EDIT.
//
// course HTTP client types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"unicode/utf8"

	course "github.com/enrollment/gen/course"
	goa "goa.design/goa/v3/pkg"
)

// UploadAllCoursesRequestBody is the type of the "course" service
// "upload_all_courses" endpoint HTTP request body.
type UploadAllCoursesRequestBody struct {
	Courses []*CoursePayloadRequestBody `form:"courses" json:"courses" xml:"courses"`
}

// GetAllCoursesRequestBody is the type of the "course" service
// "get_all_courses" endpoint HTTP request body.
type GetAllCoursesRequestBody struct {
	// Page number for pagination
	Page int `form:"page" json:"page" xml:"page"`
	// Number of items per page
	Limit int `form:"limit" json:"limit" xml:"limit"`
}

// GetAllCoursesResponseBody is the type of the "course" service
// "get_all_courses" endpoint HTTP response body.
type GetAllCoursesResponseBody []*CourseResponse

// GetUserAvailableCoursesResponseBody is the type of the "course" service
// "get_user_available_courses" endpoint HTTP response body.
type GetUserAvailableCoursesResponseBody []*CourseResponse

// UploadAllCoursesBadRequestResponseBody is the type of the "course" service
// "upload_all_courses" endpoint HTTP response body for the "bad_request" error.
type UploadAllCoursesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UploadAllCoursesUnAuthorizedResponseBody is the type of the "course" service
// "upload_all_courses" endpoint HTTP response body for the "un_authorized"
// error.
type UploadAllCoursesUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAllCoursesBadRequestResponseBody is the type of the "course" service
// "get_all_courses" endpoint HTTP response body for the "bad_request" error.
type GetAllCoursesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAllCoursesUnAuthorizedResponseBody is the type of the "course" service
// "get_all_courses" endpoint HTTP response body for the "un_authorized" error.
type GetAllCoursesUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserAvailableCoursesBadRequestResponseBody is the type of the "course"
// service "get_user_available_courses" endpoint HTTP response body for the
// "bad_request" error.
type GetUserAvailableCoursesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserAvailableCoursesUnAuthorizedResponseBody is the type of the "course"
// service "get_user_available_courses" endpoint HTTP response body for the
// "un_authorized" error.
type GetUserAvailableCoursesUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CoursePayloadRequestBody is used to define fields on request body types.
type CoursePayloadRequestBody struct {
	// Name of the course
	Name string `form:"name" json:"name" xml:"name"`
	// Number of credits for the course
	Credits int `form:"credits" json:"credits" xml:"credits"`
	// Cicle number of the course
	CicleNumber int `form:"cicle_number" json:"cicle_number" xml:"cicle_number"`
}

// CourseResponse is used to define fields on response body types.
type CourseResponse struct {
	// Unique identifier for the course
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the course
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Number of credits for the course
	Credits *int `form:"credits,omitempty" json:"credits,omitempty" xml:"credits,omitempty"`
	// Cicle number of the course
	CicleNumber *int `form:"cicle_number,omitempty" json:"cicle_number,omitempty" xml:"cicle_number,omitempty"`
}

// NewUploadAllCoursesRequestBody builds the HTTP request body from the payload
// of the "upload_all_courses" endpoint of the "course" service.
func NewUploadAllCoursesRequestBody(p *course.UploadAllCoursesPayload) *UploadAllCoursesRequestBody {
	body := &UploadAllCoursesRequestBody{}
	if p.Courses != nil {
		body.Courses = make([]*CoursePayloadRequestBody, len(p.Courses))
		for i, val := range p.Courses {
			body.Courses[i] = marshalCourseCoursePayloadToCoursePayloadRequestBody(val)
		}
	} else {
		body.Courses = []*CoursePayloadRequestBody{}
	}
	return body
}

// NewGetAllCoursesRequestBody builds the HTTP request body from the payload of
// the "get_all_courses" endpoint of the "course" service.
func NewGetAllCoursesRequestBody(p *course.GetAllCoursesPayload) *GetAllCoursesRequestBody {
	body := &GetAllCoursesRequestBody{
		Page:  p.Page,
		Limit: p.Limit,
	}
	return body
}

// NewUploadAllCoursesBadRequest builds a course service upload_all_courses
// endpoint bad_request error.
func NewUploadAllCoursesBadRequest(body *UploadAllCoursesBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUploadAllCoursesUnAuthorized builds a course service upload_all_courses
// endpoint un_authorized error.
func NewUploadAllCoursesUnAuthorized(body *UploadAllCoursesUnAuthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAllCoursesCourseOK builds a "course" service "get_all_courses"
// endpoint result from a HTTP "OK" response.
func NewGetAllCoursesCourseOK(body []*CourseResponse) []*course.Course {
	v := make([]*course.Course, len(body))
	for i, val := range body {
		v[i] = unmarshalCourseResponseToCourseCourse(val)
	}

	return v
}

// NewGetAllCoursesBadRequest builds a course service get_all_courses endpoint
// bad_request error.
func NewGetAllCoursesBadRequest(body *GetAllCoursesBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAllCoursesUnAuthorized builds a course service get_all_courses
// endpoint un_authorized error.
func NewGetAllCoursesUnAuthorized(body *GetAllCoursesUnAuthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserAvailableCoursesCourseOK builds a "course" service
// "get_user_available_courses" endpoint result from a HTTP "OK" response.
func NewGetUserAvailableCoursesCourseOK(body []*CourseResponse) []*course.Course {
	v := make([]*course.Course, len(body))
	for i, val := range body {
		v[i] = unmarshalCourseResponseToCourseCourse(val)
	}

	return v
}

// NewGetUserAvailableCoursesBadRequest builds a course service
// get_user_available_courses endpoint bad_request error.
func NewGetUserAvailableCoursesBadRequest(body *GetUserAvailableCoursesBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserAvailableCoursesUnAuthorized builds a course service
// get_user_available_courses endpoint un_authorized error.
func NewGetUserAvailableCoursesUnAuthorized(body *GetUserAvailableCoursesUnAuthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUploadAllCoursesBadRequestResponseBody runs the validations defined
// on upload_all_courses_bad_request_response_body
func ValidateUploadAllCoursesBadRequestResponseBody(body *UploadAllCoursesBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUploadAllCoursesUnAuthorizedResponseBody runs the validations
// defined on upload_all_courses_un_authorized_response_body
func ValidateUploadAllCoursesUnAuthorizedResponseBody(body *UploadAllCoursesUnAuthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAllCoursesBadRequestResponseBody runs the validations defined on
// get_all_courses_bad_request_response_body
func ValidateGetAllCoursesBadRequestResponseBody(body *GetAllCoursesBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAllCoursesUnAuthorizedResponseBody runs the validations defined
// on get_all_courses_un_authorized_response_body
func ValidateGetAllCoursesUnAuthorizedResponseBody(body *GetAllCoursesUnAuthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserAvailableCoursesBadRequestResponseBody runs the validations
// defined on get_user_available_courses_bad_request_response_body
func ValidateGetUserAvailableCoursesBadRequestResponseBody(body *GetUserAvailableCoursesBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserAvailableCoursesUnAuthorizedResponseBody runs the validations
// defined on get_user_available_courses_un_authorized_response_body
func ValidateGetUserAvailableCoursesUnAuthorizedResponseBody(body *GetUserAvailableCoursesUnAuthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCoursePayloadRequestBody runs the validations defined on
// CoursePayloadRequestBody
func ValidateCoursePayloadRequestBody(body *CoursePayloadRequestBody) (err error) {
	if utf8.RuneCountInString(body.Name) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 1, true))
	}
	if utf8.RuneCountInString(body.Name) > 128 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 128, false))
	}
	if body.Credits < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.credits", body.Credits, 1, true))
	}
	if body.CicleNumber < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError("body.cicle_number", body.CicleNumber, 1, true))
	}
	return
}

// ValidateCourseResponse runs the validations defined on CourseResponse
func ValidateCourseResponse(body *CourseResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Credits == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("credits", "body"))
	}
	if body.CicleNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cicle_number", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 128, false))
		}
	}
	if body.Credits != nil {
		if *body.Credits < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.credits", *body.Credits, 1, true))
		}
	}
	if body.CicleNumber != nil {
		if *body.CicleNumber < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.cicle_number", *body.CicleNumber, 1, true))
		}
	}
	return
}
