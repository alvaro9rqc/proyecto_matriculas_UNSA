// Code generated by goa v3.21.0, DO NOT EDIT.
//
// course HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	course "github.com/enrollment/gen/course"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildUploadAllCoursesRequest instantiates a HTTP request object with method
// and path set to call the "course" service "upload_all_courses" endpoint
func (c *Client) BuildUploadAllCoursesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadAllCoursesCoursePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("course", "upload_all_courses", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadAllCoursesRequest returns an encoder for requests sent to the
// course upload_all_courses server.
func EncodeUploadAllCoursesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*course.UploadAllCoursesPayload)
		if !ok {
			return goahttp.ErrInvalidType("course", "upload_all_courses", "*course.UploadAllCoursesPayload", v)
		}
		body := NewUploadAllCoursesRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("course", "upload_all_courses", err)
		}
		return nil
	}
}

// DecodeUploadAllCoursesResponse returns a decoder for responses returned by
// the course upload_all_courses endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUploadAllCoursesResponse may return the following errors:
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "un_authorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeUploadAllCoursesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UploadAllCoursesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("course", "upload_all_courses", err)
			}
			err = ValidateUploadAllCoursesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("course", "upload_all_courses", err)
			}
			return nil, NewUploadAllCoursesBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body UploadAllCoursesUnAuthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("course", "upload_all_courses", err)
			}
			err = ValidateUploadAllCoursesUnAuthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("course", "upload_all_courses", err)
			}
			return nil, NewUploadAllCoursesUnAuthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("course", "upload_all_courses", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAllCoursesRequest instantiates a HTTP request object with method and
// path set to call the "course" service "get_all_courses" endpoint
func (c *Client) BuildGetAllCoursesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAllCoursesCoursePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("course", "get_all_courses", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAllCoursesRequest returns an encoder for requests sent to the
// course get_all_courses server.
func EncodeGetAllCoursesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*course.GetAllCoursesPayload)
		if !ok {
			return goahttp.ErrInvalidType("course", "get_all_courses", "*course.GetAllCoursesPayload", v)
		}
		body := NewGetAllCoursesRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("course", "get_all_courses", err)
		}
		return nil
	}
}

// DecodeGetAllCoursesResponse returns a decoder for responses returned by the
// course get_all_courses endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetAllCoursesResponse may return the following errors:
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "un_authorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetAllCoursesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAllCoursesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("course", "get_all_courses", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateCourseResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("course", "get_all_courses", err)
			}
			res := NewGetAllCoursesCourseOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetAllCoursesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("course", "get_all_courses", err)
			}
			err = ValidateGetAllCoursesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("course", "get_all_courses", err)
			}
			return nil, NewGetAllCoursesBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body GetAllCoursesUnAuthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("course", "get_all_courses", err)
			}
			err = ValidateGetAllCoursesUnAuthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("course", "get_all_courses", err)
			}
			return nil, NewGetAllCoursesUnAuthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("course", "get_all_courses", resp.StatusCode, string(body))
		}
	}
}

// BuildGetUserAvailableCoursesRequest instantiates a HTTP request object with
// method and path set to call the "course" service
// "get_user_available_courses" endpoint
func (c *Client) BuildGetUserAvailableCoursesRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserAvailableCoursesCoursePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("course", "get_user_available_courses", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetUserAvailableCoursesResponse returns a decoder for responses
// returned by the course get_user_available_courses endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeGetUserAvailableCoursesResponse may return the following errors:
//   - "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//   - "un_authorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetUserAvailableCoursesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserAvailableCoursesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("course", "get_user_available_courses", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateCourseResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("course", "get_user_available_courses", err)
			}
			res := NewGetUserAvailableCoursesCourseOK(body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetUserAvailableCoursesBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("course", "get_user_available_courses", err)
			}
			err = ValidateGetUserAvailableCoursesBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("course", "get_user_available_courses", err)
			}
			return nil, NewGetUserAvailableCoursesBadRequest(&body)
		case http.StatusUnauthorized:
			var (
				body GetUserAvailableCoursesUnAuthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("course", "get_user_available_courses", err)
			}
			err = ValidateGetUserAvailableCoursesUnAuthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("course", "get_user_available_courses", err)
			}
			return nil, NewGetUserAvailableCoursesUnAuthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("course", "get_user_available_courses", resp.StatusCode, string(body))
		}
	}
}

// marshalCourseCoursePayloadToCoursePayloadRequestBody builds a value of type
// *CoursePayloadRequestBody from a value of type *course.CoursePayload.
func marshalCourseCoursePayloadToCoursePayloadRequestBody(v *course.CoursePayload) *CoursePayloadRequestBody {
	res := &CoursePayloadRequestBody{
		Name:        v.Name,
		Credits:     v.Credits,
		CicleNumber: v.CicleNumber,
	}

	return res
}

// marshalCoursePayloadRequestBodyToCourseCoursePayload builds a value of type
// *course.CoursePayload from a value of type *CoursePayloadRequestBody.
func marshalCoursePayloadRequestBodyToCourseCoursePayload(v *CoursePayloadRequestBody) *course.CoursePayload {
	res := &course.CoursePayload{
		Name:        v.Name,
		Credits:     v.Credits,
		CicleNumber: v.CicleNumber,
	}

	return res
}

// unmarshalCourseResponseToCourseCourse builds a value of type *course.Course
// from a value of type *CourseResponse.
func unmarshalCourseResponseToCourseCourse(v *CourseResponse) *course.Course {
	res := &course.Course{
		ID:          *v.ID,
		Name:        *v.Name,
		Credits:     *v.Credits,
		CicleNumber: *v.CicleNumber,
	}

	return res
}
