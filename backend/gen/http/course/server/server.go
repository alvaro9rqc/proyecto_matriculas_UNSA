// Code generated by goa v3.21.1, DO NOT EDIT.
//
// course HTTP server
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	"context"
	"net/http"

	course "github.com/enrollment/gen/course"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the course service endpoint HTTP handlers.
type Server struct {
	Mounts                  []*MountPoint
	UploadAllCourses        http.Handler
	GetAllCourses           http.Handler
	GetUserAvailableCourses http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the course service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *course.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"UploadAllCourses", "POST", "/courses/upload"},
			{"GetAllCourses", "GET", "/courses"},
			{"GetUserAvailableCourses", "GET", "/courses/available"},
		},
		UploadAllCourses:        NewUploadAllCoursesHandler(e.UploadAllCourses, mux, decoder, encoder, errhandler, formatter),
		GetAllCourses:           NewGetAllCoursesHandler(e.GetAllCourses, mux, decoder, encoder, errhandler, formatter),
		GetUserAvailableCourses: NewGetUserAvailableCoursesHandler(e.GetUserAvailableCourses, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "course" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.UploadAllCourses = m(s.UploadAllCourses)
	s.GetAllCourses = m(s.GetAllCourses)
	s.GetUserAvailableCourses = m(s.GetUserAvailableCourses)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return course.MethodNames[:] }

// Mount configures the mux to serve the course endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountUploadAllCoursesHandler(mux, h.UploadAllCourses)
	MountGetAllCoursesHandler(mux, h.GetAllCourses)
	MountGetUserAvailableCoursesHandler(mux, h.GetUserAvailableCourses)
}

// Mount configures the mux to serve the course endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountUploadAllCoursesHandler configures the mux to serve the "course"
// service "upload_all_courses" endpoint.
func MountUploadAllCoursesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/courses/upload", f)
}

// NewUploadAllCoursesHandler creates a HTTP handler which loads the HTTP
// request and calls the "course" service "upload_all_courses" endpoint.
func NewUploadAllCoursesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadAllCoursesRequest(mux, decoder)
		encodeResponse = EncodeUploadAllCoursesResponse(encoder)
		encodeError    = EncodeUploadAllCoursesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "upload_all_courses")
		ctx = context.WithValue(ctx, goa.ServiceKey, "course")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAllCoursesHandler configures the mux to serve the "course" service
// "get_all_courses" endpoint.
func MountGetAllCoursesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/courses", f)
}

// NewGetAllCoursesHandler creates a HTTP handler which loads the HTTP request
// and calls the "course" service "get_all_courses" endpoint.
func NewGetAllCoursesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAllCoursesRequest(mux, decoder)
		encodeResponse = EncodeGetAllCoursesResponse(encoder)
		encodeError    = EncodeGetAllCoursesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_all_courses")
		ctx = context.WithValue(ctx, goa.ServiceKey, "course")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetUserAvailableCoursesHandler configures the mux to serve the "course"
// service "get_user_available_courses" endpoint.
func MountGetUserAvailableCoursesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/courses/available", f)
}

// NewGetUserAvailableCoursesHandler creates a HTTP handler which loads the
// HTTP request and calls the "course" service "get_user_available_courses"
// endpoint.
func NewGetUserAvailableCoursesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetUserAvailableCoursesResponse(encoder)
		encodeError    = EncodeGetUserAvailableCoursesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_user_available_courses")
		ctx = context.WithValue(ctx, goa.ServiceKey, "course")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
