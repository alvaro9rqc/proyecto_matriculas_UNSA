// Code generated by goa v3.21.1, DO NOT EDIT.
//
// course HTTP server types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	"unicode/utf8"

	course "github.com/enrollment/gen/course"
	goa "goa.design/goa/v3/pkg"
)

// UploadAllCoursesRequestBody is the type of the "course" service
// "upload_all_courses" endpoint HTTP request body.
type UploadAllCoursesRequestBody struct {
	Courses []*CoursePayloadRequestBody `form:"courses,omitempty" json:"courses,omitempty" xml:"courses,omitempty"`
}

// GetAllCoursesRequestBody is the type of the "course" service
// "get_all_courses" endpoint HTTP request body.
type GetAllCoursesRequestBody struct {
	// Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
}

// GetAllCoursesResponseBody is the type of the "course" service
// "get_all_courses" endpoint HTTP response body.
type GetAllCoursesResponseBody []*CourseResponse

// GetUserAvailableCoursesResponseBody is the type of the "course" service
// "get_user_available_courses" endpoint HTTP response body.
type GetUserAvailableCoursesResponseBody []*CourseResponse

// UploadAllCoursesBadRequestResponseBody is the type of the "course" service
// "upload_all_courses" endpoint HTTP response body for the "bad_request" error.
type UploadAllCoursesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UploadAllCoursesUnAuthorizedResponseBody is the type of the "course" service
// "upload_all_courses" endpoint HTTP response body for the "un_authorized"
// error.
type UploadAllCoursesUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAllCoursesBadRequestResponseBody is the type of the "course" service
// "get_all_courses" endpoint HTTP response body for the "bad_request" error.
type GetAllCoursesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetAllCoursesUnAuthorizedResponseBody is the type of the "course" service
// "get_all_courses" endpoint HTTP response body for the "un_authorized" error.
type GetAllCoursesUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserAvailableCoursesBadRequestResponseBody is the type of the "course"
// service "get_user_available_courses" endpoint HTTP response body for the
// "bad_request" error.
type GetUserAvailableCoursesBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetUserAvailableCoursesUnAuthorizedResponseBody is the type of the "course"
// service "get_user_available_courses" endpoint HTTP response body for the
// "un_authorized" error.
type GetUserAvailableCoursesUnAuthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CourseResponse is used to define fields on response body types.
type CourseResponse struct {
	// Unique identifier for the course
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the course
	Name string `form:"name" json:"name" xml:"name"`
	// Number of credits for the course
	Credits int `form:"credits" json:"credits" xml:"credits"`
	// Cicle number of the course
	CicleNumber int `form:"cicle_number" json:"cicle_number" xml:"cicle_number"`
}

// CoursePayloadRequestBody is used to define fields on request body types.
type CoursePayloadRequestBody struct {
	// Name of the course
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Number of credits for the course
	Credits *int `form:"credits,omitempty" json:"credits,omitempty" xml:"credits,omitempty"`
	// Cicle number of the course
	CicleNumber *int `form:"cicle_number,omitempty" json:"cicle_number,omitempty" xml:"cicle_number,omitempty"`
}

// NewGetAllCoursesResponseBody builds the HTTP response body from the result
// of the "get_all_courses" endpoint of the "course" service.
func NewGetAllCoursesResponseBody(res []*course.Course) GetAllCoursesResponseBody {
	body := make([]*CourseResponse, len(res))
	for i, val := range res {
		body[i] = marshalCourseCourseToCourseResponse(val)
	}
	return body
}

// NewGetUserAvailableCoursesResponseBody builds the HTTP response body from
// the result of the "get_user_available_courses" endpoint of the "course"
// service.
func NewGetUserAvailableCoursesResponseBody(res []*course.Course) GetUserAvailableCoursesResponseBody {
	body := make([]*CourseResponse, len(res))
	for i, val := range res {
		body[i] = marshalCourseCourseToCourseResponse(val)
	}
	return body
}

// NewUploadAllCoursesBadRequestResponseBody builds the HTTP response body from
// the result of the "upload_all_courses" endpoint of the "course" service.
func NewUploadAllCoursesBadRequestResponseBody(res *goa.ServiceError) *UploadAllCoursesBadRequestResponseBody {
	body := &UploadAllCoursesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadAllCoursesUnAuthorizedResponseBody builds the HTTP response body
// from the result of the "upload_all_courses" endpoint of the "course" service.
func NewUploadAllCoursesUnAuthorizedResponseBody(res *goa.ServiceError) *UploadAllCoursesUnAuthorizedResponseBody {
	body := &UploadAllCoursesUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAllCoursesBadRequestResponseBody builds the HTTP response body from
// the result of the "get_all_courses" endpoint of the "course" service.
func NewGetAllCoursesBadRequestResponseBody(res *goa.ServiceError) *GetAllCoursesBadRequestResponseBody {
	body := &GetAllCoursesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetAllCoursesUnAuthorizedResponseBody builds the HTTP response body from
// the result of the "get_all_courses" endpoint of the "course" service.
func NewGetAllCoursesUnAuthorizedResponseBody(res *goa.ServiceError) *GetAllCoursesUnAuthorizedResponseBody {
	body := &GetAllCoursesUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserAvailableCoursesBadRequestResponseBody builds the HTTP response
// body from the result of the "get_user_available_courses" endpoint of the
// "course" service.
func NewGetUserAvailableCoursesBadRequestResponseBody(res *goa.ServiceError) *GetUserAvailableCoursesBadRequestResponseBody {
	body := &GetUserAvailableCoursesBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetUserAvailableCoursesUnAuthorizedResponseBody builds the HTTP response
// body from the result of the "get_user_available_courses" endpoint of the
// "course" service.
func NewGetUserAvailableCoursesUnAuthorizedResponseBody(res *goa.ServiceError) *GetUserAvailableCoursesUnAuthorizedResponseBody {
	body := &GetUserAvailableCoursesUnAuthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUploadAllCoursesPayload builds a course service upload_all_courses
// endpoint payload.
func NewUploadAllCoursesPayload(body *UploadAllCoursesRequestBody) *course.UploadAllCoursesPayload {
	v := &course.UploadAllCoursesPayload{}
	v.Courses = make([]*course.CoursePayload, len(body.Courses))
	for i, val := range body.Courses {
		v.Courses[i] = unmarshalCoursePayloadRequestBodyToCourseCoursePayload(val)
	}

	return v
}

// NewGetAllCoursesPayload builds a course service get_all_courses endpoint
// payload.
func NewGetAllCoursesPayload(body *GetAllCoursesRequestBody) *course.GetAllCoursesPayload {
	v := &course.GetAllCoursesPayload{
		Page:  *body.Page,
		Limit: *body.Limit,
	}

	return v
}

// ValidateUploadAllCoursesRequestBody runs the validations defined on
// upload_all_courses_request_body
func ValidateUploadAllCoursesRequestBody(body *UploadAllCoursesRequestBody) (err error) {
	if body.Courses == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("courses", "body"))
	}
	for _, e := range body.Courses {
		if e != nil {
			if err2 := ValidateCoursePayloadRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetAllCoursesRequestBody runs the validations defined on
// get_all_courses_request_body
func ValidateGetAllCoursesRequestBody(body *GetAllCoursesRequestBody) (err error) {
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "body"))
	}
	if body.Page != nil {
		if *body.Page < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.page", *body.Page, 1, true))
		}
	}
	if body.Limit != nil {
		if *body.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.limit", *body.Limit, 1, true))
		}
	}
	return
}

// ValidateCoursePayloadRequestBody runs the validations defined on
// CoursePayloadRequestBody
func ValidateCoursePayloadRequestBody(body *CoursePayloadRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Credits == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("credits", "body"))
	}
	if body.CicleNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cicle_number", "body"))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 128, false))
		}
	}
	if body.Credits != nil {
		if *body.Credits < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.credits", *body.Credits, 1, true))
		}
	}
	if body.CicleNumber != nil {
		if *body.CicleNumber < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.cicle_number", *body.CicleNumber, 1, true))
		}
	}
	return
}
