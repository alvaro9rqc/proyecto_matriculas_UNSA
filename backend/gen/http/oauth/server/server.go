// Code generated by goa v3.21.1, DO NOT EDIT.
//
// oauth HTTP server
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	"context"
	"net/http"

	oauth "github.com/enrollment/gen/oauth"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the oauth service endpoint HTTP handlers.
type Server struct {
	Mounts   []*MountPoint
	Redirect http.Handler
	Callback http.Handler
	Logout   http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the oauth service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *oauth.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Redirect", "GET", "/auth/redirect/{provider}"},
			{"Callback", "GET", "/auth/callback/{provider}"},
			{"Logout", "POST", "/auth/logout"},
		},
		Redirect: NewRedirectHandler(e.Redirect, mux, decoder, encoder, errhandler, formatter),
		Callback: NewCallbackHandler(e.Callback, mux, decoder, encoder, errhandler, formatter),
		Logout:   NewLogoutHandler(e.Logout, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "oauth" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Redirect = m(s.Redirect)
	s.Callback = m(s.Callback)
	s.Logout = m(s.Logout)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return oauth.MethodNames[:] }

// Mount configures the mux to serve the oauth endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountRedirectHandler(mux, h.Redirect)
	MountCallbackHandler(mux, h.Callback)
	MountLogoutHandler(mux, h.Logout)
}

// Mount configures the mux to serve the oauth endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountRedirectHandler configures the mux to serve the "oauth" service
// "redirect" endpoint.
func MountRedirectHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/redirect/{provider}", f)
}

// NewRedirectHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth" service "redirect" endpoint.
func NewRedirectHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRedirectRequest(mux, decoder)
		encodeResponse = EncodeRedirectResponse(encoder)
		encodeError    = EncodeRedirectError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "redirect")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCallbackHandler configures the mux to serve the "oauth" service
// "callback" endpoint.
func MountCallbackHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/auth/callback/{provider}", f)
}

// NewCallbackHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth" service "callback" endpoint.
func NewCallbackHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCallbackRequest(mux, decoder)
		encodeResponse = EncodeCallbackResponse(encoder)
		encodeError    = EncodeCallbackError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "callback")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLogoutHandler configures the mux to serve the "oauth" service "logout"
// endpoint.
func MountLogoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/auth/logout", f)
}

// NewLogoutHandler creates a HTTP handler which loads the HTTP request and
// calls the "oauth" service "logout" endpoint.
func NewLogoutHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLogoutRequest(mux, decoder)
		encodeResponse = EncodeLogoutResponse(encoder)
		encodeError    = EncodeLogoutError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "logout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "oauth")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
