// Code generated by goa v3.21.0, DO NOT EDIT.
//
// oauth HTTP server types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	"unicode/utf8"

	oauth "github.com/enrollment/gen/oauth"
	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "oauth" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// ID of the OAuth provider
	OauthProviderID *int `form:"oauth_provider_id,omitempty" json:"oauth_provider_id,omitempty" xml:"oauth_provider_id,omitempty"`
	// OAuth code given by the provider
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
}

// LoginResponseBody is the type of the "oauth" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// ID of the provider used
	OauthProviderID *int `form:"oauth_provider_id,omitempty" json:"oauth_provider_id,omitempty" xml:"oauth_provider_id,omitempty"`
	// Access token given by the provider
	ProviderUserID *string `form:"provider_user_id,omitempty" json:"provider_user_id,omitempty" xml:"provider_user_id,omitempty"`
	// Profile picture URL
	ProfilePicture *string `form:"profile_picture,omitempty" json:"profile_picture,omitempty" xml:"profile_picture,omitempty"`
}

// LoginUnauthorizedResponseBody is the type of the "oauth" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginNotFoundResponseBody is the type of the "oauth" service "login"
// endpoint HTTP response body for the "not_found" error.
type LoginNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "oauth" service.
func NewLoginResponseBody(res *oauth.UserOauthInfo) *LoginResponseBody {
	body := &LoginResponseBody{
		OauthProviderID: res.OauthProviderID,
		ProviderUserID:  res.ProviderUserID,
		ProfilePicture:  res.ProfilePicture,
	}
	return body
}

// NewLoginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "oauth" service.
func NewLoginUnauthorizedResponseBody(res *goa.ServiceError) *LoginUnauthorizedResponseBody {
	body := &LoginUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginNotFoundResponseBody builds the HTTP response body from the result
// of the "login" endpoint of the "oauth" service.
func NewLoginNotFoundResponseBody(res *goa.ServiceError) *LoginNotFoundResponseBody {
	body := &LoginNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginPayload builds a oauth service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *oauth.LoginPayload {
	v := &oauth.LoginPayload{
		OauthProviderID: *body.OauthProviderID,
		Code:            *body.Code,
	}

	return v
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.OauthProviderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("oauth_provider_id", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.OauthProviderID != nil {
		if *body.OauthProviderID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.oauth_provider_id", *body.OauthProviderID, 1, true))
		}
	}
	if body.Code != nil {
		if utf8.RuneCountInString(*body.Code) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.code", *body.Code, utf8.RuneCountInString(*body.Code), 10, true))
		}
	}
	return
}
