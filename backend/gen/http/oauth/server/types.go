// Code generated by goa v3.21.1, DO NOT EDIT.
//
// oauth HTTP server types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package server

import (
	oauth "github.com/enrollment/gen/oauth"
	goa "goa.design/goa/v3/pkg"
)

// CallbackResponseBody is the type of the "oauth" service "callback" endpoint
// HTTP response body.
type CallbackResponseBody struct {
	// Session access token
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// Access token expiration timestamp
	ExpiresAt string `form:"expires_at" json:"expires_at" xml:"expires_at"`
}

// MeResponseBody is the type of the "oauth" service "me" endpoint HTTP
// response body.
type MeResponseBody struct {
	// Unique user ID
	ID string `form:"id" json:"id" xml:"id"`
	// User email
	Email string `form:"email" json:"email" xml:"email"`
	// User first name
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	// User last names
	LastNames string `form:"lastNames" json:"lastNames" xml:"lastNames"`
	// User remaining names
	RemainingNames string `form:"remainingNames" json:"remainingNames" xml:"remainingNames"`
}

// CallbackInvalidTokenResponseBody is the type of the "oauth" service
// "callback" endpoint HTTP response body for the "invalid_token" error.
type CallbackInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CallbackServerErrorResponseBody is the type of the "oauth" service
// "callback" endpoint HTTP response body for the "server_error" error.
type CallbackServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LogoutUnauthorizedResponseBody is the type of the "oauth" service "logout"
// endpoint HTTP response body for the "unauthorized" error.
type LogoutUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MeUnauthorizedResponseBody is the type of the "oauth" service "me" endpoint
// HTTP response body for the "unauthorized" error.
type MeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewCallbackResponseBody builds the HTTP response body from the result of the
// "callback" endpoint of the "oauth" service.
func NewCallbackResponseBody(res *oauth.LoginResult) *CallbackResponseBody {
	body := &CallbackResponseBody{
		AccessToken: res.AccessToken,
		ExpiresAt:   res.ExpiresAt,
	}
	return body
}

// NewMeResponseBody builds the HTTP response body from the result of the "me"
// endpoint of the "oauth" service.
func NewMeResponseBody(res *oauth.AccountUser) *MeResponseBody {
	body := &MeResponseBody{
		ID:             res.ID,
		Email:          res.Email,
		FirstName:      res.FirstName,
		LastNames:      res.LastNames,
		RemainingNames: res.RemainingNames,
	}
	return body
}

// NewCallbackInvalidTokenResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "oauth" service.
func NewCallbackInvalidTokenResponseBody(res *goa.ServiceError) *CallbackInvalidTokenResponseBody {
	body := &CallbackInvalidTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCallbackServerErrorResponseBody builds the HTTP response body from the
// result of the "callback" endpoint of the "oauth" service.
func NewCallbackServerErrorResponseBody(res *goa.ServiceError) *CallbackServerErrorResponseBody {
	body := &CallbackServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLogoutUnauthorizedResponseBody builds the HTTP response body from the
// result of the "logout" endpoint of the "oauth" service.
func NewLogoutUnauthorizedResponseBody(res *goa.ServiceError) *LogoutUnauthorizedResponseBody {
	body := &LogoutUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMeUnauthorizedResponseBody builds the HTTP response body from the result
// of the "me" endpoint of the "oauth" service.
func NewMeUnauthorizedResponseBody(res *goa.ServiceError) *MeUnauthorizedResponseBody {
	body := &MeUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginPayload builds a oauth service login endpoint payload.
func NewLoginPayload(provider string) *oauth.LoginPayload {
	v := &oauth.LoginPayload{}
	v.Provider = oauth.OAuthProvider(provider)

	return v
}

// NewCallbackPayload builds a oauth service callback endpoint payload.
func NewCallbackPayload(provider string, code string, state string, ipAddress string, userAgent string) *oauth.CallbackPayload {
	v := &oauth.CallbackPayload{}
	v.Provider = oauth.OAuthProvider(provider)
	v.Code = code
	v.State = state
	v.IPAddress = ipAddress
	v.UserAgent = userAgent

	return v
}

// NewLogoutPayload builds a oauth service logout endpoint payload.
func NewLogoutPayload(token string) *oauth.LogoutPayload {
	v := &oauth.LogoutPayload{}
	v.Token = token

	return v
}
