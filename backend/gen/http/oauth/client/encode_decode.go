// Code generated by goa v3.21.1, DO NOT EDIT.
//
// oauth HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	oauth "github.com/enrollment/gen/oauth"
	goahttp "goa.design/goa/v3/http"
)

// BuildLoginRequest instantiates a HTTP request object with method and path
// set to call the "oauth" service "login" endpoint
func (c *Client) BuildLoginRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		provider string
	)
	{
		p, ok := v.(*oauth.LoginPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth", "login", "*oauth.LoginPayload", v)
		}
		provider = string(p.Provider)
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginOauthPath(provider)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth", "login", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLoginResponse returns a decoder for responses returned by the oauth
// login endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeLoginResponse may return the following errors:
//   - "invalid_provider" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoginResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth", "login", err)
			}
			err = ValidateLoginResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth", "login", err)
			}
			res := NewLoginOAuthRedirectResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body LoginInvalidProviderResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth", "login", err)
			}
			err = ValidateLoginInvalidProviderResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth", "login", err)
			}
			return nil, NewLoginInvalidProvider(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth", "login", resp.StatusCode, string(body))
		}
	}
}

// BuildCallbackRequest instantiates a HTTP request object with method and path
// set to call the "oauth" service "callback" endpoint
func (c *Client) BuildCallbackRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		provider string
	)
	{
		p, ok := v.(*oauth.CallbackPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oauth", "callback", "*oauth.CallbackPayload", v)
		}
		provider = string(p.Provider)
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CallbackOauthPath(provider)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth", "callback", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCallbackRequest returns an encoder for requests sent to the oauth
// callback server.
func EncodeCallbackRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauth.CallbackPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth", "callback", "*oauth.CallbackPayload", v)
		}
		values := req.URL.Query()
		values.Add("code", p.Code)
		values.Add("state", p.State)
		values.Add("ip_address", p.IPAddress)
		values.Add("user_agent", p.UserAgent)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeCallbackResponse returns a decoder for responses returned by the oauth
// callback endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCallbackResponse may return the following errors:
//   - "invalid_token" (type *goa.ServiceError): http.StatusBadRequest
//   - "server_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeCallbackResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CallbackResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth", "callback", err)
			}
			err = ValidateCallbackResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth", "callback", err)
			}
			res := NewCallbackLoginResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CallbackInvalidTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth", "callback", err)
			}
			err = ValidateCallbackInvalidTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth", "callback", err)
			}
			return nil, NewCallbackInvalidToken(&body)
		case http.StatusInternalServerError:
			var (
				body CallbackServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth", "callback", err)
			}
			err = ValidateCallbackServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth", "callback", err)
			}
			return nil, NewCallbackServerError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth", "callback", resp.StatusCode, string(body))
		}
	}
}

// BuildLogoutRequest instantiates a HTTP request object with method and path
// set to call the "oauth" service "logout" endpoint
func (c *Client) BuildLogoutRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LogoutOauthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth", "logout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLogoutRequest returns an encoder for requests sent to the oauth logout
// server.
func EncodeLogoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oauth.LogoutPayload)
		if !ok {
			return goahttp.ErrInvalidType("oauth", "logout", "*oauth.LogoutPayload", v)
		}
		{
			head := p.Token
			req.Header.Set("Authorization", head)
		}
		return nil
	}
}

// DecodeLogoutResponse returns a decoder for responses returned by the oauth
// logout endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeLogoutResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeLogoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body LogoutUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth", "logout", err)
			}
			err = ValidateLogoutUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth", "logout", err)
			}
			return nil, NewLogoutUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth", "logout", resp.StatusCode, string(body))
		}
	}
}

// BuildMeRequest instantiates a HTTP request object with method and path set
// to call the "oauth" service "me" endpoint
func (c *Client) BuildMeRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MeOauthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oauth", "me", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeMeResponse returns a decoder for responses returned by the oauth me
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeMeResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeMeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth", "me", err)
			}
			err = ValidateMeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth", "me", err)
			}
			res := NewMeAccountUserOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body MeUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oauth", "me", err)
			}
			err = ValidateMeUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("oauth", "me", err)
			}
			return nil, NewMeUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oauth", "me", resp.StatusCode, string(body))
		}
	}
}
