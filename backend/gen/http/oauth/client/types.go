// Code generated by goa v3.21.0, DO NOT EDIT.
//
// oauth HTTP client types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"unicode/utf8"

	oauth "github.com/enrollment/gen/oauth"
	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "oauth" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// ID of the OAuth provider
	OauthProviderID int `form:"oauth_provider_id" json:"oauth_provider_id" xml:"oauth_provider_id"`
	// OAuth code given by the provider
	Code string `form:"code" json:"code" xml:"code"`
}

// LoginResponseBody is the type of the "oauth" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// ID of the provider used
	OauthProviderID *int `form:"oauth_provider_id,omitempty" json:"oauth_provider_id,omitempty" xml:"oauth_provider_id,omitempty"`
	// Access token given by the provider
	ProviderUserID *string `form:"provider_user_id,omitempty" json:"provider_user_id,omitempty" xml:"provider_user_id,omitempty"`
	// Profile picture URL
	ProfilePicture *string `form:"profile_picture,omitempty" json:"profile_picture,omitempty" xml:"profile_picture,omitempty"`
}

// LoginUnauthorizedResponseBody is the type of the "oauth" service "login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LoginNotFoundResponseBody is the type of the "oauth" service "login"
// endpoint HTTP response body for the "not_found" error.
type LoginNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "oauth" service.
func NewLoginRequestBody(p *oauth.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		OauthProviderID: p.OauthProviderID,
		Code:            p.Code,
	}
	return body
}

// NewLoginUserOauthInfoOK builds a "oauth" service "login" endpoint result
// from a HTTP "OK" response.
func NewLoginUserOauthInfoOK(body *LoginResponseBody) *oauth.UserOauthInfo {
	v := &oauth.UserOauthInfo{
		OauthProviderID: body.OauthProviderID,
		ProviderUserID:  body.ProviderUserID,
		ProfilePicture:  body.ProfilePicture,
	}

	return v
}

// NewLoginUnauthorized builds a oauth service login endpoint unauthorized
// error.
func NewLoginUnauthorized(body *LoginUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLoginNotFound builds a oauth service login endpoint not_found error.
func NewLoginNotFound(body *LoginNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateLoginResponseBody runs the validations defined on LoginResponseBody
func ValidateLoginResponseBody(body *LoginResponseBody) (err error) {
	if body.OauthProviderID != nil {
		if *body.OauthProviderID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.oauth_provider_id", *body.OauthProviderID, 1, true))
		}
	}
	if body.ProviderUserID != nil {
		if utf8.RuneCountInString(*body.ProviderUserID) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.provider_user_id", *body.ProviderUserID, utf8.RuneCountInString(*body.ProviderUserID), 10, true))
		}
	}
	if body.ProfilePicture != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.profile_picture", *body.ProfilePicture, goa.FormatURI))
	}
	return
}

// ValidateLoginUnauthorizedResponseBody runs the validations defined on
// login_unauthorized_response_body
func ValidateLoginUnauthorizedResponseBody(body *LoginUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLoginNotFoundResponseBody runs the validations defined on
// login_not_found_response_body
func ValidateLoginNotFoundResponseBody(body *LoginNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
