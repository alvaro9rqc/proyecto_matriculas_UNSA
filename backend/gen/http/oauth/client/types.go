// Code generated by goa v3.21.1, DO NOT EDIT.
//
// oauth HTTP client types
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	oauth "github.com/enrollment/gen/oauth"
	goa "goa.design/goa/v3/pkg"
)

// RedirectResponseBody is the type of the "oauth" service "redirect" endpoint
// HTTP response body.
type RedirectResponseBody struct {
	// OAuth authorization URL
	RedirectURL *string `form:"redirect_url,omitempty" json:"redirect_url,omitempty" xml:"redirect_url,omitempty"`
}

// CallbackResponseBody is the type of the "oauth" service "callback" endpoint
// HTTP response body.
type CallbackResponseBody struct {
	// Session access token
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// Access token expiration timestamp
	ExpiresAt *string `form:"expires_at,omitempty" json:"expires_at,omitempty" xml:"expires_at,omitempty"`
}

// MeResponseBody is the type of the "oauth" service "me" endpoint HTTP
// response body.
type MeResponseBody struct {
	// Unique user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User first name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// User last names
	LastNames *string `form:"lastNames,omitempty" json:"lastNames,omitempty" xml:"lastNames,omitempty"`
	// User remaining names
	RemainingNames *string `form:"remainingNames,omitempty" json:"remainingNames,omitempty" xml:"remainingNames,omitempty"`
}

// RedirectInvalidProviderResponseBody is the type of the "oauth" service
// "redirect" endpoint HTTP response body for the "invalid_provider" error.
type RedirectInvalidProviderResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CallbackInvalidTokenResponseBody is the type of the "oauth" service
// "callback" endpoint HTTP response body for the "invalid_token" error.
type CallbackInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CallbackServerErrorResponseBody is the type of the "oauth" service
// "callback" endpoint HTTP response body for the "server_error" error.
type CallbackServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LogoutUnauthorizedResponseBody is the type of the "oauth" service "logout"
// endpoint HTTP response body for the "unauthorized" error.
type LogoutUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MeUnauthorizedResponseBody is the type of the "oauth" service "me" endpoint
// HTTP response body for the "unauthorized" error.
type MeUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewRedirectOAuthRedirectResultOK builds a "oauth" service "redirect"
// endpoint result from a HTTP "OK" response.
func NewRedirectOAuthRedirectResultOK(body *RedirectResponseBody) *oauth.OAuthRedirectResult {
	v := &oauth.OAuthRedirectResult{
		RedirectURL: *body.RedirectURL,
	}

	return v
}

// NewRedirectInvalidProvider builds a oauth service redirect endpoint
// invalid_provider error.
func NewRedirectInvalidProvider(body *RedirectInvalidProviderResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCallbackLoginResultOK builds a "oauth" service "callback" endpoint result
// from a HTTP "OK" response.
func NewCallbackLoginResultOK(body *CallbackResponseBody) *oauth.LoginResult {
	v := &oauth.LoginResult{
		AccessToken: *body.AccessToken,
		ExpiresAt:   *body.ExpiresAt,
	}

	return v
}

// NewCallbackInvalidToken builds a oauth service callback endpoint
// invalid_token error.
func NewCallbackInvalidToken(body *CallbackInvalidTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCallbackServerError builds a oauth service callback endpoint server_error
// error.
func NewCallbackServerError(body *CallbackServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLogoutUnauthorized builds a oauth service logout endpoint unauthorized
// error.
func NewLogoutUnauthorized(body *LogoutUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewMeAccountUserOK builds a "oauth" service "me" endpoint result from a HTTP
// "OK" response.
func NewMeAccountUserOK(body *MeResponseBody) *oauth.AccountUser {
	v := &oauth.AccountUser{
		ID:             *body.ID,
		Email:          *body.Email,
		FirstName:      *body.FirstName,
		LastNames:      *body.LastNames,
		RemainingNames: *body.RemainingNames,
	}

	return v
}

// NewMeUnauthorized builds a oauth service me endpoint unauthorized error.
func NewMeUnauthorized(body *MeUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateRedirectResponseBody runs the validations defined on
// RedirectResponseBody
func ValidateRedirectResponseBody(body *RedirectResponseBody) (err error) {
	if body.RedirectURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("redirect_url", "body"))
	}
	if body.RedirectURL != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.redirect_url", *body.RedirectURL, goa.FormatURI))
	}
	return
}

// ValidateCallbackResponseBody runs the validations defined on
// CallbackResponseBody
func ValidateCallbackResponseBody(body *CallbackResponseBody) (err error) {
	if body.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "body"))
	}
	if body.ExpiresAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_at", "body"))
	}
	if body.ExpiresAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.expires_at", *body.ExpiresAt, goa.FormatDateTime))
	}
	return
}

// ValidateMeResponseBody runs the validations defined on MeResponseBody
func ValidateMeResponseBody(body *MeResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastNames == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastNames", "body"))
	}
	if body.RemainingNames == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("remainingNames", "body"))
	}
	return
}

// ValidateRedirectInvalidProviderResponseBody runs the validations defined on
// redirect_invalid_provider_response_body
func ValidateRedirectInvalidProviderResponseBody(body *RedirectInvalidProviderResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCallbackInvalidTokenResponseBody runs the validations defined on
// callback_invalid_token_response_body
func ValidateCallbackInvalidTokenResponseBody(body *CallbackInvalidTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCallbackServerErrorResponseBody runs the validations defined on
// callback_server_error_response_body
func ValidateCallbackServerErrorResponseBody(body *CallbackServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLogoutUnauthorizedResponseBody runs the validations defined on
// logout_unauthorized_response_body
func ValidateLogoutUnauthorizedResponseBody(body *LogoutUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMeUnauthorizedResponseBody runs the validations defined on
// me_unauthorized_response_body
func ValidateMeUnauthorizedResponseBody(body *MeUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
