// Code generated by goa v3.21.1, DO NOT EDIT.
//
// oauth HTTP client CLI support package
//
// Command:
// $ goa gen github.com/enrollment/design/api

package client

import (
	"unicode/utf8"

	oauth "github.com/enrollment/gen/oauth"
	goa "goa.design/goa/v3/pkg"
)

// BuildLoginPayload builds the payload for the oauth login endpoint from CLI
// flags.
func BuildLoginPayload(oauthLoginProvider string) (*oauth.LoginPayload, error) {
	var err error
	var provider string
	{
		provider = oauthLoginProvider
		if !(provider == "google" || provider == "microsoft") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("provider", provider, []any{"google", "microsoft"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &oauth.LoginPayload{}
	v.Provider = oauth.OAuthProvider(provider)

	return v, nil
}

// BuildCallbackPayload builds the payload for the oauth callback endpoint from
// CLI flags.
func BuildCallbackPayload(oauthCallbackProvider string, oauthCallbackCode string, oauthCallbackState string, oauthCallbackIPAddress string, oauthCallbackUserAgent string) (*oauth.CallbackPayload, error) {
	var err error
	var provider string
	{
		provider = oauthCallbackProvider
		if !(provider == "google" || provider == "microsoft") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("provider", provider, []any{"google", "microsoft"}))
		}
		if err != nil {
			return nil, err
		}
	}
	var code string
	{
		code = oauthCallbackCode
		if utf8.RuneCountInString(code) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("code", code, utf8.RuneCountInString(code), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var state string
	{
		state = oauthCallbackState
		if utf8.RuneCountInString(state) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("state", state, utf8.RuneCountInString(state), 10, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var ipAddress string
	{
		ipAddress = oauthCallbackIPAddress
		err = goa.MergeErrors(err, goa.ValidateFormat("ip_address", ipAddress, goa.FormatIP))
		if err != nil {
			return nil, err
		}
	}
	var userAgent string
	{
		userAgent = oauthCallbackUserAgent
	}
	v := &oauth.CallbackPayload{}
	v.Provider = oauth.OAuthProvider(provider)
	v.Code = code
	v.State = state
	v.IPAddress = ipAddress
	v.UserAgent = userAgent

	return v, nil
}

// BuildLogoutPayload builds the payload for the oauth logout endpoint from CLI
// flags.
func BuildLogoutPayload(oauthLogoutToken string) (*oauth.LogoutPayload, error) {
	var token string
	{
		token = oauthLogoutToken
	}
	v := &oauth.LogoutPayload{}
	v.Token = token

	return v, nil
}
